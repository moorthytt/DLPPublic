package de.metro.nsp.user.serviceassignment.service.impl; import java.io.IOException; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.Comparator; import java.util.Date; import java.util.HashMap; import java.util.HashSet; import java.util.List; import java.util.Map; import java.util.Map.Entry; import java.util.Set; import java.util.StringJoiner; import java.util.TreeMap; import java.util.UUID; import java.util.stream.Collectors; import org.apache.commons.collections4.CollectionUtils; import org.apache.commons.lang.StringUtils; import org.apache.solr.common.SolrInputDocument; import org.slf4j.Logger; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.beans.factory.annotation.Value; import org.springframework.data.solr.core.query.Criteria; import org.springframework.stereotype.Component; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; import de.metro.nsp.common.externalapp.mquality.dto.MqualitySaveSupplierContactRequest; import de.metro.nsp.common.services.util.AccessValidation; import de.metro.nsp.common.services.util.ListingSystemInfoUtil; import de.metro.nsp.company.management.constant.CompanyManagementConstants; import de.metro.nsp.company.management.dao.SupplierCompanyTransactionDao; import de.metro.nsp.company.management.entity.SolrCompanyUpdateFailedRecordRequest; import de.metro.nsp.company.management.entity.SupplierCompanyTransactionEntity; import de.metro.nsp.company.management.entity.SupplierCompanyTransactionPrimaryKey; import de.metro.nsp.company.management.exception.NspCompanyManagementServiceException; import de.metro.nsp.company.management.exception.SupplierCompanyTransactionException; import de.metro.nsp.company.management.request.ManageSupplierAdminsRequest; import de.metro.nsp.company.management.request.SaveRegularUserToSARequest; import de.metro.nsp.company.management.response.MqualityServiceAssignmentResponse; import de.metro.nsp.company.management.response.SupplierAdmin; import de.metro.nsp.company.management.response.ViewSupplierAdminsResponse; import de.metro.nsp.company.management.service.impl.CompanyManagementSASearchServiceImpl; import de.metro.nsp.core.platform.configuration.ConfigurationPropertyUtil; import de.metro.nsp.core.platform.constants.CommonConstants; import de.metro.nsp.core.platform.exception.DocumentArchiveException; import de.metro.nsp.core.platform.exception.SolrException; import de.metro.nsp.core.platform.exception.UtilException; import de.metro.nsp.core.platform.json.JsonUtil; import de.metro.nsp.core.platform.logger.LoggerUtil; import de.metro.nsp.core.platform.rest.constants.HttpStatusCode; import de.metro.nsp.core.platform.solr.client.NspSolrClient; import de.metro.nsp.core.platform.solr.dto.SolrSearchResultDto; import de.metro.nsp.core.platform.solr.failure.handler.dao.SolrFailureDao; import de.metro.nsp.core.platform.solr.failure.handler.entity.SolrFailedRecords; import de.metro.nsp.core.platform.solr.query.SolrQueryUtil; import de.metro.nsp.core.platform.user.authorization.NspUserRoles; import de.metro.nsp.core.platform.user.authorization.context.NspUserContext; import de.metro.nsp.core.platform.user.authorization.entity.ContextMapper; import de.metro.nsp.core.platform.user.authorization.entity.UserType; import de.metro.nsp.core.platform.util.BeanUtils; import de.metro.nsp.document.alert.exception.NspDocumentAlertDataException; import de.metro.nsp.document.alert.exception.NspDocumentAlertServiceException; import de.metro.nsp.document.alert.service.DocumentAlertService; import de.metro.nsp.document.util.DocumentUtil; import de.metro.nsp.user.ErrorUtil; import de.metro.nsp.user.ServiceAppsEnum; import de.metro.nsp.user.identity.exception.UserAuthException; import de.metro.nsp.user.identity.request.ContextMapping; import de.metro.nsp.user.identity.request.UpdateUserRoleContext; import de.metro.nsp.user.identity.request.UpdateUserRoleRequest; import de.metro.nsp.user.identity.request.UserRole; import de.metro.nsp.user.identity.response.AssignResult; import de.metro.nsp.user.identity.response.AssignRoleResponse; import de.metro.nsp.user.identity.response.GetUserRoleResponse; import de.metro.nsp.user.identity.response.RemoveRoleResponse; import de.metro.nsp.user.identity.response.Roles; import de.metro.nsp.user.identity.response.UserRoleResponse; import de.metro.nsp.user.invite.enums.ServiceEnum; import de.metro.nsp.user.invite.exception.NspMasterDataTranslationUtilException; import de.metro.nsp.user.invite.util.MasterDataTranslationUtil; import de.metro.nsp.user.registration.constants.RegistrationConstants; import de.metro.nsp.user.registration.dao.RegistrationDao; import de.metro.nsp.user.registration.dao.UserServicesMasterDataDao; import de.metro.nsp.user.registration.entity.UserServicesMetadataTranslation; import de.metro.nsp.user.registration.exception.NspUserRegistrationDataException; import de.metro.nsp.user.registration.util.RegistrationUtil; import de.metro.nsp.user.serviceassignment.constants.UserManagementServiceConstants; import de.metro.nsp.user.serviceassignment.dao.UserManagementSolrDao; import de.metro.nsp.user.serviceassignment.dao.UserServiceTransactionsDao; import de.metro.nsp.user.serviceassignment.dao.impl.UserManagementSolrDaoImpl; import de.metro.nsp.user.serviceassignment.dto.UserServiceTransactionDto; import de.metro.nsp.user.serviceassignment.entity.UserRoleServiceSolrEntity; import de.metro.nsp.user.serviceassignment.entity.UserServiceTransactionsEntity; import de.metro.nsp.user.serviceassignment.entity.UserServiceTransactionsPrimaryKey; import de.metro.nsp.user.serviceassignment.entity.UserSolrEntity; import de.metro.nsp.user.serviceassignment.exception.UserManagementDataException; import de.metro.nsp.user.serviceassignment.exception.UserManagementServiceException; import de.metro.nsp.user.serviceassignment.request.AddUserRoleRequest; import de.metro.nsp.user.serviceassignment.request.RemoveUserRoleRequest; import de.metro.nsp.user.serviceassignment.request.UserRoleRequest; import de.metro.nsp.user.serviceassignment.request.UserServiceDetailsRequest; import de.metro.nsp.user.serviceassignment.response.Response; import de.metro.nsp.user.serviceassignment.response.ResponseUtil; import de.metro.nsp.user.serviceassignment.service.ManageUserSolrService; import de.metro.nsp.user.serviceassignment.service.SupplierUserService; import de.metro.nsp.user.serviceassignment.util.ServiceAssignmentUtil; import de.metro.nsp.user.serviceassignment.util.UserManagementSolrIndexUtil; import de.metro.nsp.user.supplier.contacts.constants.SupplierContactConstants; import de.metro.nsp.user.supplier.contacts.dao.SupplierContactsDBDao; import de.metro.nsp.user.supplier.contacts.dao.SupplierContactsSolrDao; import de.metro.nsp.user.supplier.contacts.entity.SupplierContactPrimaryKey; import de.metro.nsp.user.supplier.contacts.entity.SupplierContactsEntity; import de.metro.nsp.user.supplier.contacts.exception.SupplierContactsDataException; import de.metro.nsp.user.supplier.contacts.exception.SupplierContactsServiceException; import de.metro.nsp.user.supplier.contacts.service.SupplierContactsSyncService; import de.metro.nsp.user.supplier.contacts.util.SupplierContactsUtil; import de.metro.nsp.user.ucaclient.service.UcaClientService; import de.metro.nsp.user.userauth.util.UserAuthServiceWrapper; import de.metro.nsp.usermanagement.common.entity.NspUser; import de.metro.nsp.usermanagement.common.entity.NspUserRole; import de.metro.nsp.usermanagement.common.entity.NspUserRolePrimaryKey; import de.metro.nsp.usermanagement.common.entity.SupplierCompany; import de.metro.nsp.usermanagement.constants.UserManagementConstants; import de.metro.nsp.usermanagement.exception.NspUserManagementDataException; import de.metro.nsp.usermanagement.supplier.company.dao.SupplierCompanyDao; import de.metro.nsp.usermanagement.supplier.company.exception.SupplierCompanyDataException; import de.metro.nsp.usermanagement.supplier.onboard.constants.SupplierOnboardingConstants; import de.metro.nsp.usermanagement.supplier.onboard.dao.AuthorizationDao; import de.metro.nsp.usermanagement.supplier.onboard.dto.SupplierUser; import de.metro.nsp.usermanagement.supplier.onboard.exception.NspUserManagementServiceException; import de.metro.nsp.usermanagement.user.dao.NspUserDao; import de.metro.nsp.usermanagement.user.exception.NspUserDataException; import de.metro.nsp.usermanagement.user.role.dao.NspUserRoleDao; import de.metro.nsp.util.UserAuthServiceUtil; import lombok.Setter; /** * * @author Mindtree Limited * */ @Component public class ManageUserServiceUtil { @Autowired @Setter ServiceAssignmentUtil serviceAssignmentUtil; @Autowired @Setter UserAuthServiceWrapper userAuthServiceWrapper; @Autowired @Setter AuthorizationDao authorizationDao; @Autowired ObjectMapper objectMapper; @Autowired @Setter UserManagementSolrIndexUtil userManagementSolrIndexUtil; @Autowired SupplierContactsUtil supplierContactsUtil; @Autowired @Setter SupplierContactsDBDao supplierContactsDBDao; @Autowired UserServicesMasterDataDao userServicesMasterDataDao; @Autowired @Setter private ListingSystemInfoUtil listingSystemInfoUtil; @Autowired MasterDataTranslationUtil masterTranslationUtil; @Autowired @Setter ErrorUtil errorUtil; @Autowired @Setter private UserManagementSolrDaoImpl userManagementSolrDaoImpl; @Autowired @Setter SupplierCompanyDao supplierCompanyDao; @Autowired @Setter NspUserDao nspUserDao; @Autowired @Setter NspUserRoleDao nspUserRoleDao; @Autowired @Setter UcaClientService ucaClientService; @Autowired UserManagementSolrDao userManagementSolrDao; @Autowired ManageUserSolrService manageUserSolrService; @Autowired DocumentAlertService documentAlertService; @Autowired SupplierContactsSyncService supplierContactsSyncService; @Autowired JsonUtil jsonUtil; @Autowired SolrFailureDao solrFailureDao; @Autowired UserServiceTransactionsDao userServiceTransactionsDao; @Autowired SupplierContactsSolrDao supplierContactSolrDao; @Autowired @Setter BeanUtils beanUtil; @Autowired ResponseUtil responseUtil; @Autowired RegistrationUtil registrationUtil; /** Solr Client */ @Autowired NspSolrClient nspSolrClient; /** Query util for Solr */ @Autowired SolrQueryUtil solrQueryUtil; /** Solr Collection name for UserRoleService */ @Value("${solr.userRoleServiceCollection}") @Setter private String userRoleServiceCollectionName; /** Solr Collection for suppleir company */ @Value("${solr.supplierCompany}") @Setter private String supplierCompanyCollectionName; @Autowired @Setter ConfigurationPropertyUtil configurationPropertyUtil; @Autowired SupplierCompanyTransactionDao supplierCompanyTransactionDao; @Autowired @Setter DocumentUtil documentUtil; @Autowired RegistrationDao registrationDao; @Autowired UserAuthServiceUtil userAuthServiceUtil; @Autowired @Setter @Qualifier("manageUserDocumentsService") SupplierUserService manageUserDocumentsService; @Autowired CompanyManagementSASearchServiceImpl companyManagementSASearchServiceImpl; @Autowired AccessValidation accessValidation; public static final Logger LOGGER = LoggerUtil.getLogger(ManageUserServiceUtil.class); /** * * @param addUserRoleRequest * @param serviceRequestId * @return * @throws UserManagementServiceException */ public Response createRoleToUser(AddUserRoleRequest addUserRoleRequest, String serviceRequestId) throws UserManagementServiceException { LOGGER.debug("Entered method createRoleToUser in idam and nsp in ManagrUserServiceUtil"); Response response = new Response(); try { boolean mqualityAdminCreateCheck = false; mqualityAdminCreateCheck = checkCretaeMqualityAdmin(addUserRoleRequest, mqualityAdminCreateCheck); UserSolrEntity solrUser; if ((CompanyManagementConstants.COUNTRY_INT).equalsIgnoreCase(addUserRoleRequest.getCountry()) && ("MCC").equalsIgnoreCase(addUserRoleRequest.getSalesline()) && mqualityAdminCreateCheck) { solrUser = this.fetchSolrUserForEmail(addUserRoleRequest.getAdminEmail()); } else { solrUser = this.fetchSolrUserForEmail(addUserRoleRequest.getEmail()); } NspUser nspUser = nspUserDao.fetchNspUser(solrUser.getUserId()); SupplierCompany supplierCompany = supplierCompanyDao.fetchSupplierCompany(addUserRoleRequest.getCountry(), addUserRoleRequest.getSalesline(), addUserRoleRequest.getMmsSupplierNumber(), true); SupplierUser supplierUser = new SupplierUser(); supplierUser.setCountry(addUserRoleRequest.getCountry()); supplierUser.setSalesLine(addUserRoleRequest.getSalesline()); supplierUser.setMmsSupplierNumber(addUserRoleRequest.getMmsSupplierNumber()); supplierUser.setSupplierCompany(supplierCompany.getSupplierCompanyName()); supplierUser.setAppName(addUserRoleRequest.getServiceName()); if ((CompanyManagementConstants.COUNTRY_INT).equalsIgnoreCase(addUserRoleRequest.getCountry()) && ("MCC").equalsIgnoreCase(addUserRoleRequest.getSalesline()) && mqualityAdminCreateCheck) { addUserRoleRequest.setServiceName(CommonConstants.INT_SUPPLIER_ONBOARDING); supplierUser .setNspRole(ServiceEnum.valueOf(prepareEnumKey(addUserRoleRequest.getServiceName())).role()); } else { supplierUser .setNspRole(ServiceEnum.valueOf(prepareEnumKey(addUserRoleRequest.getServiceName())).role()); } supplierUser.setGln(addUserRoleRequest.getGln()); supplierUser.setBusinessDepartment(addUserRoleRequest.getBusinessDepartments()); UserRole userRole = new UserRole(); userRole.setUserType(UserType.SUPP.getUserType()); userRole.setRoleId(ServiceEnum.valueOf(prepareEnumKey(addUserRoleRequest.getServiceName())).role()); /** Process SBD Context change for large context issue */ if (NspUserRoles.NSP_SUPPLIER_SL_COUNTRY_DEPT.getUserRole().equalsIgnoreCase(supplierUser.getNspRole())) { prepareContextForSBD(supplierUser, userRole); } else { userRole.setContextMappings(Arrays.asList(this.getContextMapping(supplierUser, new ContextMapping()))); } Set userRoleSet = new HashSet<>(); userRoleSet.add(userRole); // if user has already role context in idam then update else assign context. AssignRoleResponse userRoleResponse = processConsolidationForExistingIDAMContext(addUserRoleRequest, solrUser.getUserId(), userRoleSet, nspUser.getUserUniqueId()); boolean isContactCreated = false; if (null != userRoleResponse && null != userRoleResponse.getResults() && userRoleResponse.getResults().get(0).getStatus() == 201) { NspUserRole nspUserRole = this.createNspUserRole(nspUser, addUserRoleRequest, userRole.getContextMappings(), supplierCompany, serviceRequestId); this.saveTransactionDetailsForAddRole(addUserRoleRequest, serviceRequestId, UserManagementServiceConstants.ADD_SERVICE); isContactCreated = this.createContactForNewSupplier(nspUser, nspUserRole, userRole.getContextMappings()); } LOGGER.info("isContactCreated :: {}", isContactCreated); if (isContactCreated) { LOGGER.debug("Successfully created new role to user"); response.setStatusCode(HttpStatusCode.STATUS_CODE_201); response.setStatusMessage(UserManagementServiceConstants.SUCCESSFULLY_CREATED_ROLE_TO_USER); } else { LOGGER.debug("ManageUserServiceUtil : createRoleToUser :Failed to add role to supplier"); response.setStatusCode(HttpStatusCode.STATUS_CODE_500); response.setStatusMessage("Failed to Assign a Role to supplier"); } } catch (UtilException | JsonProcessingException | NspUserDataException | SupplierCompanyDataException | SupplierContactsDataException e) { LOGGER.error("Supplier not added. Please raise support request: {} ", e); throw new UserManagementServiceException("Supplier not added. Please raise support request : {}", e.getCause()); } catch (UserAuthException e) { LOGGER.error("Supplier not added. Exception occured in IDAM :: {} ", e); throw new UserManagementServiceException("IDAM Exception", e.getCause()); } LOGGER.debug("Leaving method createUserInIdam in ManagrUserServiceUtil"); return response; } private boolean checkCretaeMqualityAdmin(AddUserRoleRequest addUserRoleRequest, boolean mqualityAdminCreateCheck) { boolean checkMqualityAdminCreate = mqualityAdminCreateCheck; if ((addUserRoleRequest.isAdminCreateCheck()) && (!addUserRoleRequest.isAdminAssignCheck())) { checkMqualityAdminCreate = true; } return checkMqualityAdminCreate; } public AssignRoleResponse processConsolidationForExistingIDAMContext(AddUserRoleRequest addUserRoleRequest, String userId, Set userRoleSet, String userUniqueId) throws UserAuthException { LOGGER.debug("processConsolidationForExistingIDAMContext in ManagrUserServiceUtil starts"); AssignRoleResponse userAssignRoleResponse = new AssignRoleResponse(); List roleListForAddRoleRequest = filteredIdamRoleListForConsolidateContext( addUserRoleRequest.getServiceName(), userId); if (CommonConstants.DOC.equalsIgnoreCase(addUserRoleRequest.getServiceName()) && CollectionUtils.isNotEmpty(roleListForAddRoleRequest) && null != roleListForAddRoleRequest.get(0).getContextMappings() && !roleListForAddRoleRequest.get(0).getContextMappings().isEmpty()) { List newContextMappingList = userRoleSet.iterator().next().getContextMappings(); UpdateUserRoleContext context = new UpdateUserRoleContext(); UpdateUserRoleRequest updateUserRequest = new UpdateUserRoleRequest(); List contextMappingForUpdatedroleList = roleListForAddRoleRequest.get(0) .getContextMappings(); List finalContextSBDroleList = new ArrayList<>(); appendSupplierNumberForCountryAndDepartment(newContextMappingList, contextMappingForUpdatedroleList, finalContextSBDroleList); // large context issue context.setUserType(UserType.SUPP.getUserType()); context.setContextMappings(finalContextSBDroleList); commonMethodForUpdateUserRole(addUserRoleRequest, userUniqueId, userAssignRoleResponse, context, updateUserRequest); } else if (CollectionUtils.isNotEmpty(roleListForAddRoleRequest) && null != roleListForAddRoleRequest.get(0).getContextMappings() && !roleListForAddRoleRequest.get(0).getContextMappings().isEmpty()) { List newContextMapping = userRoleSet.iterator().next().getContextMappings(); UpdateUserRoleContext context = new UpdateUserRoleContext(); UpdateUserRoleRequest updateUserRequest = new UpdateUserRoleRequest(); List contextMappingForUpdatedrole = roleListForAddRoleRequest.get(0).getContextMappings(); contextMappingForUpdatedrole.addAll(newContextMapping); context.setUserType(UserType.SUPP.getUserType()); context.setContextMappings(contextMappingForUpdatedrole); commonMethodForUpdateUserRole(addUserRoleRequest, userUniqueId, userAssignRoleResponse, context, updateUserRequest); } else { userAssignRoleResponse = userAuthServiceWrapper.assignRole(addUserRoleRequest.getEmail(), userRoleSet, userUniqueId); } LOGGER.debug("processConsolidationForExistingIDAMContext in ManagrUserServiceUtil ends"); return userAssignRoleResponse; } private void commonMethodForUpdateUserRole(AddUserRoleRequest addUserRoleRequest, String userUniqueId, AssignRoleResponse userAssignRoleResponse, UpdateUserRoleContext context, UpdateUserRoleRequest updateUserRequest) throws UserAuthException { updateUserRequest.setRole(ServiceEnum.valueOf(prepareEnumKey(addUserRoleRequest.getServiceName())).role()); updateUserRequest.setUserUniqueId(userUniqueId); updateUserRequest.setEmailId(addUserRoleRequest.getEmail()); updateUserRequest.setUpdateUserContext(context); UserRoleResponse updateUserRoleResponse = userAuthServiceWrapper.updateUserRoleDetails(updateUserRequest); LOGGER.info("status from IDAM for updateUserRoleDetails in checkAddRoleForConsolidateContext :: {}", updateUserRoleResponse.getStatus()); if (updateUserRoleResponse.getStatus() == 200) { List assignResultList = new ArrayList<>(); AssignResult assignResult = new AssignResult(); assignResult.setStatus(201); assignResultList.add(assignResult); userAssignRoleResponse.setResults(assignResultList); } } private void appendSupplierNumberForCountryAndDepartment(List newContextMappingList, List contextMappingForUpdatedroleList, List finalContextSBDroleList) { Set uniqueOldMatches = getUniqueOldMatches(contextMappingForUpdatedroleList); Set uniqueNewMatches = getUniqueNewMatches(newContextMappingList); if (uniqueOldMatches.stream().anyMatch(uniqueNewMatches::contains)) { List tempUnmatchedList = new ArrayList<>(); List businessdeptListOld=new ArrayList<>(); contextMappingForUpdatedroleList.stream().forEach((oldContextMapping)->{ businessdeptListOld.add(oldContextMapping.getSupplierBusinessDepartment().get(0)); }); for (ContextMapping newContextMapping : newContextMappingList) { String newSBDdept = newContextMapping.getSupplierBusinessDepartment().get(0); String country = newContextMapping.getCountry().get(0); String salesline = newContextMapping.getSalesLine().get(0); for (ContextMapping oldContextMapping : contextMappingForUpdatedroleList) { String oldSBDdept = oldContextMapping.getSupplierBusinessDepartment().get(0); String oldCountry = oldContextMapping.getCountry().get(0); String oldSalesline = oldContextMapping.getSalesLine().get(0); prepareContextMapping(tempUnmatchedList, newContextMapping, newSBDdept, country, salesline, oldContextMapping, oldSBDdept, oldCountry, oldSalesline,businessdeptListOld); } } if (uniqueOldMatches.size() < uniqueNewMatches.size()) contextMappingForUpdatedroleList.addAll(tempUnmatchedList); finalContextSBDroleList.addAll(contextMappingForUpdatedroleList); } else { contextMappingForUpdatedroleList.addAll(newContextMappingList); finalContextSBDroleList.addAll(contextMappingForUpdatedroleList); } } private void prepareContextMapping(List tempUnmatchedList, ContextMapping newContextMapping, String newSBDdept, String country, String salesline, ContextMapping oldContextMapping, String oldSBDdept, String oldCountry, String oldSalesline, List businessdeptListOld) { if (businessdeptListOld.contains(newSBDdept) && country.equalsIgnoreCase(oldCountry) && salesline.equalsIgnoreCase(oldSalesline)) { if(!oldContextMapping.getSupplierNumber().contains(newContextMapping.getSupplierNumber().get(0)) &&newSBDdept.equalsIgnoreCase(oldSBDdept)) { oldContextMapping.getSupplierNumber().addAll(newContextMapping.getSupplierNumber()); } } else { tempUnmatchedList.add(newContextMapping); } } public Set getUniqueNewMatches(List newContextMappingList) { Set uniqueNewMatches = new HashSet<>(); for (ContextMapping newContextMapping : newContextMappingList) { uniqueNewMatches.add(newContextMapping.getCountry().get(0) + "_" + newContextMapping.getSalesLine().get(0) + "_" + newContextMapping.getSupplierBusinessDepartment().get(0)); } return uniqueNewMatches; } public Set getUniqueOldMatches(List contextMappingForUpdatedroleList) { Set uniqueOldMatches = new HashSet<>(); for (ContextMapping oldContextMapping : contextMappingForUpdatedroleList) { uniqueOldMatches.add(oldContextMapping.getCountry().get(0) + "_" + oldContextMapping.getSalesLine().get(0) + "_" + oldContextMapping.getSupplierBusinessDepartment().get(0)); } return uniqueOldMatches; } public List filteredIdamRoleListForConsolidateContext(String serviceName, String userId) { LOGGER.debug("filteredIdamRoleListForConsolidateContext in ManagrUserServiceUtil starts"); List roleListForAddRoleRequest = null; int userRoleGetErrorCountFromIdam = 0; try { GetUserRoleResponse userRoleResponse = userAuthServiceWrapper .getUserRoleDetailsFromIdam(userId.toLowerCase()); if (null != userRoleResponse && CollectionUtils.isNotEmpty(userRoleResponse.getResults()) && 200 == userRoleResponse.getStatus()) { List successResult = userRoleResponse.getResults().get(0); if (CollectionUtils.isNotEmpty(successResult)) { roleListForAddRoleRequest = successResult.stream() .filter(role -> role.getRoleId() .equalsIgnoreCase(ServiceEnum.valueOf(prepareEnumKey(serviceName)).role())) .collect(Collectors.toList()); } } } catch (UserAuthException e) { LOGGER.error("fail to get user role details for consolidate context in IDAM for user {},{}", userId, e); userRoleGetErrorCountFromIdam++; } LOGGER.info( "filteredIdamRoleListForConsolidateContext in ManagrUserServiceUtil ends with userRoleGetErrorCountFromIdam {}", userRoleGetErrorCountFromIdam); return roleListForAddRoleRequest; } public UserSolrEntity fetchSolrUserForEmail(String email) { UserServiceDetailsRequest userDetailsRequest = new UserServiceDetailsRequest(); userDetailsRequest.setEmail(email); LOGGER.info("************* FEtching user from solr ************** :: {}", email); SolrSearchResultDto searchDto = userManagementSolrDao.fetchUserDetailsFromSolr(userDetailsRequest); List solrUsersList = searchDto.getSearchResults(); return (UserSolrEntity) solrUsersList.get(0); } public ContextMapping getContextMapping(SupplierUser supplierUser, ContextMapping contextMapping) throws SupplierCompanyDataException { LOGGER.debug("Entered method getContextMapping in ManagrUserServiceUtil"); List countryList = Arrays.asList(supplierUser.getCountry()); serviceAssignmentUtil.setContextMapperBasedOnRole(contextMapping, countryList, supplierUser.getSalesLine(), supplierUser.getNspRole(), null, supplierUser); LOGGER.debug("Leaving method getContextMapping in ManagrUserServiceUtil"); return contextMapping; } public List getContextMappingList(SupplierUser supplierUser, ContextMapping contextMapping, List contextMapList) throws SupplierCompanyDataException { LOGGER.debug("Entered method getContextMappingList in ManagrUserServiceUtil"); List countryList = Arrays.asList(supplierUser.getCountry()); serviceAssignmentUtil.setContextMapperBasedOnRole(contextMapping, countryList, supplierUser.getSalesLine(), supplierUser.getNspRole(), null, supplierUser); contextMapList.add(contextMapping); LOGGER.debug("Leaving method getContextMappingList in ManagrUserServiceUtil"); return contextMapList; } /** * This method creates a new role to the user in DB * * @param nspUser * @param supplierCompany * @param addUserRoleRequest * @throws JsonProcessingException * @throws SupplierCompanyDataException * @throws UtilException */ public NspUserRole createNspUserRole(NspUser nspUser, AddUserRoleRequest addUserRoleRequest, List contextMapping, SupplierCompany supplierCompany, String serviceRequestId) throws JsonProcessingException, SupplierCompanyDataException { LOGGER.debug("Entered method createNspUserRole in ManagrUserServiceUtil"); boolean mqualityAdminCreateCheck = false; mqualityAdminCreateCheck = checkCretaeMqualityAdmin(addUserRoleRequest, mqualityAdminCreateCheck); List nspUserRoleList = new ArrayList<>(); NspUserRole nspUserRole = new NspUserRole(); NspUserRolePrimaryKey userRolePrimaryKey = new NspUserRolePrimaryKey(); userRolePrimaryKey.setCountry(addUserRoleRequest.getCountry()); userRolePrimaryKey.setSalesLine(addUserRoleRequest.getSalesline()); userRolePrimaryKey.setNspRole(ServiceEnum.valueOf(prepareEnumKey(addUserRoleRequest.getServiceName())).role()); userRolePrimaryKey.setUserRoleId(UUID.randomUUID()); nspUserRole.setNspUserRolePrimaryKey(userRolePrimaryKey); nspUserRole.setCreatedBy(SupplierContactConstants.SYSTEM); nspUserRole.setCreatedDate(new Date()); nspUserRole.setLastUpdatedBy(SupplierContactConstants.SYSTEM); nspUserRole.setLastUpdatedDate(new Date()); nspUserRole.setMmsSupplierNumber(addUserRoleRequest.getMmsSupplierNumber()); nspUserRole.setSupplierCompany(supplierCompany.getSupplierCompanyName()); if ((CompanyManagementConstants.COUNTRY_INT).equalsIgnoreCase(addUserRoleRequest.getCountry()) && ("MCC").equalsIgnoreCase(addUserRoleRequest.getSalesline()) && mqualityAdminCreateCheck) { nspUserRole.setServiceName(CommonConstants.SUPPLIER_ONBOARDING); } else { nspUserRole.setServiceName(addUserRoleRequest.getServiceName()); } String serviceParameterJson = objectMapper.writeValueAsString(contextMapping.get(0)); nspUserRole.setServiceParameters(serviceParameterJson); nspUserRole.setServiceRequestId(serviceRequestId); nspUserRole.setUserId(nspUser.getUserId()); nspUserRole.setUserServiceStatus(SupplierContactConstants.ACTIVE); nspUserRole.setBusinessDepartment(addUserRoleRequest.getBusinessDepartments()); nspUserRoleList.add(nspUserRole); authorizationDao.saveNspUserRoleData(nspUserRole); /* updating the user and user service details in solr */ userManagementSolrIndexUtil.saveUserDetailsToUserRoleServiceEntity(nspUser, nspUserRoleList); LOGGER.debug("Leaving method createNspUserRole in ManagrUserServiceUtil"); return nspUserRole; } private void saveTransactionDetailsForAddRole(AddUserRoleRequest addUserRoleRequest, String serviceRequestId, String action) throws SupplierCompanyDataException { LOGGER.debug("Entered method saveTransactionDetailsForAddRole in ManageUserServiceUtil"); SupplierUser supplierUser = new SupplierUser(); supplierUser.setCountry(addUserRoleRequest.getCountry()); supplierUser.setSalesLine(addUserRoleRequest.getSalesline()); supplierUser.setMmsSupplierNumber(addUserRoleRequest.getMmsSupplierNumber()); supplierUser.setAppName(addUserRoleRequest.getServiceName()); supplierUser.setNspRole(ServiceEnum.valueOf(prepareEnumKey(addUserRoleRequest.getServiceName())).role()); UserServiceTransactionsEntity userServiceTransactionsEntity = new UserServiceTransactionsEntity(); UserServiceTransactionsPrimaryKey userServiceTransactionsPrimaryKey = new UserServiceTransactionsPrimaryKey(); userServiceTransactionsPrimaryKey.setCountry(addUserRoleRequest.getCountry()); userServiceTransactionsPrimaryKey.setSalesline(addUserRoleRequest.getSalesline()); userServiceTransactionsPrimaryKey.setTransactionId(UUID.randomUUID()); userServiceTransactionsEntity.setUserServiceTransactionKey(userServiceTransactionsPrimaryKey); userServiceTransactionsEntity.setComments(addUserRoleRequest.getComments()); userServiceTransactionsEntity.setLastUpdatedBy(NspUserContext.getUpn()); userServiceTransactionsEntity.setLastUpdatedTimestamp(new Date()); userServiceTransactionsEntity.setAction(action); userServiceTransactionsEntity.setCreatedBy(NspUserContext.getUpn()); userServiceTransactionsEntity.setCreatedTimestamp(new Date()); userServiceTransactionsEntity.setServiceRequestId(serviceRequestId); userServiceTransactionsEntity.setServiceName(addUserRoleRequest.getServiceName()); userServiceTransactionsEntity.setServiceParameter( jsonUtil.writeJsonString(this.getContextMapping(supplierUser, new ContextMapping()))); userServiceTransactionsEntity.setStatus(UserManagementServiceConstants.SUCCESS); userServiceTransactionsEntity.setUserId(addUserRoleRequest.getEmail()); userServiceTransactionsDao.createUserServiceTransactions(userServiceTransactionsEntity); LOGGER.debug("Leaving method saveTransactionDetailsForAddRole in ManageUserServiceUtil"); } public boolean createContactForNewSupplier(NspUser nspUser, NspUserRole userRole, List contextMapping) throws SupplierContactsDataException, SupplierCompanyDataException { LOGGER.debug("Entered method createContactForNewSupplier in ManagrUserServiceUtil"); List supplierContactsEntityList = new ArrayList<>(); SupplierContactsEntity supplierContactsEntity; List supplierContactsForGivenId = supplierContactsDBDao .getSupplierContacts(nspUser.getUserId()); List supplierContactsFiltered = supplierContactsUtil .filterActiveUsers(supplierContactsForGivenId); List countryList = new ArrayList<>(); List saleslineList = new ArrayList<>(); List mmsSupplierNoList = new ArrayList<>(); List businessDepartmentList = new ArrayList<>(); getCountrySaleslineSupplierNoDetails(countryList, saleslineList, mmsSupplierNoList, businessDepartmentList, contextMapping, userRole.getNspUserRolePrimaryKey().getNspRole()); List supplierCompanyList = supplierCompanyDao.fetchSupplierCompanies(mmsSupplierNoList, userRole.getNspUserRolePrimaryKey().getCountry(), userRole.getNspUserRolePrimaryKey().getSalesLine()); List parentIdList = new ArrayList<>(); List companyNameList = null; for (SupplierCompany supplierCompany : supplierCompanyList) { parentIdList.add(supplierCompany.getParentId()); List supplierCompanys = supplierCompanyDao .fetchSupplierCompanies(supplierCompany.getParentId()); companyNameList = supplierCompanys.stream() .filter(obj -> RegistrationConstants.PARENT.equalsIgnoreCase(obj.getSupplierType())) .filter(SupplierCompany::isSupplierCompanyStatus).map(SupplierCompany::getSupplierCompanyName) .collect(Collectors.toList()); } if (null != supplierContactsFiltered && !supplierContactsFiltered.isEmpty()) { supplierContactsEntity = supplierContactsFiltered.get(0); supplierContactsEntity.getSupplierContactPrimaryKey().setEmailId(nspUser.getUserId()); supplierContactsEntity.getSupplierContactPrimaryKey() .setContactId(supplierContactsFiltered.get(0).getSupplierContactPrimaryKey().getContactId()); supplierContactsEntity.setCountry(getList(supplierContactsEntity.getCountry(), countryList)); supplierContactsEntity .setParentSupplierId(getList(supplierContactsEntity.getParentSupplierId(), parentIdList)); supplierContactsEntity.setSalesline(getList(supplierContactsEntity.getSalesline(), saleslineList)); supplierContactsEntity .setMmsSupplierNumber(getList(supplierContactsEntity.getMmsSupplierNumber(), mmsSupplierNoList)); supplierContactsEntity.setCompanyName(getList(supplierContactsEntity.getCompanyName(), companyNameList)); supplierContactsEntity.setUpdatedDate(new Date()); supplierContactsEntity.setBusinessDepartment( getList(supplierContactsEntity.getBusinessDepartment(), businessDepartmentList)); } else { supplierContactsEntity = new SupplierContactsEntity(); SupplierContactPrimaryKey supplierContactPrimaryKey = new SupplierContactPrimaryKey(); supplierContactPrimaryKey.setEmailId(nspUser.getUserId()); supplierContactPrimaryKey.setContactId(UUID.randomUUID()); supplierContactsEntity.setSupplierContactPrimaryKey(supplierContactPrimaryKey); supplierContactsEntity.setCountry(countryList); supplierContactsEntity.setParentSupplierId(parentIdList); supplierContactsEntity.setSalesline(saleslineList); supplierContactsEntity.setBusinessDepartment(userRole.getBusinessDepartment()); supplierContactsEntity.setMmsSupplierNumber(mmsSupplierNoList); supplierContactsEntity.setCompanyName(companyNameList); supplierContactsEntity.setFirstName(nspUser.getFirstName()); supplierContactsEntity.setLastName(nspUser.getLastName()); supplierContactsEntity.setMobilePhone(nspUser.getMobileNumber()); supplierContactsEntity.setCreatedDate(new Date()); supplierContactsEntity.setUpdatedDate(new Date()); supplierContactsEntity.setRegisteredUser(true); supplierContactsEntity.setJobTitle(SupplierContactConstants.NA); supplierContactsEntity.setUserStatus(SupplierContactConstants.ACTIVE); } supplierContactsEntityList.add(supplierContactsEntity); boolean flag = false; if (!supplierContactsEntityList.isEmpty()) flag = supplierContactsDBDao.saveSupplierContacts(supplierContactsEntityList); if (flag) { supplierContactsUtil.formSolrDtoAndSaveRecords(supplierContactsEntityList); LOGGER.debug("Supplier contacts created for success ADDING supplier from manage user {}", supplierContactsEntityList); } LOGGER.debug("Leaving method createContactForNewSupplier in ManagrUserServiceUtil"); return flag; } private List getList(List values, List newValues) { List list1 = values != null ? new ArrayList<>(values) : new ArrayList<>(); List list2 = new ArrayList<>(newValues); list1.removeAll(list2); list2.addAll(list1); return list2; } private void getCountrySaleslineSupplierNoDetails(List countryList, List saleslineList, List mmsSupplierNoList, List businessDepartmentList, List contextMappingList, String userRole) throws SupplierCompanyDataException { LOGGER.debug("Entered method getCountrySaleslineSupplierNoDetails in ManagrUserServiceUtil"); Set countrySet = null; Set saleslineSet = null; Set mmsSupplierNoSet = null; Set businessDepartmentSet = null; for (ContextMapping contextMapping : contextMappingList) { List salesline = null != contextMapping.getSalesLine() ? contextMapping.getSalesLine() : Arrays.asList(getSaleslineForCountryCode(contextMapping.getCountry(userRole))); saleslineSet = new HashSet<>(salesline); if (null != contextMapping.getSupplierNumber(userRole)) { mmsSupplierNoSet = new HashSet<>(contextMapping.getSupplierNumber(userRole)); } else if (null != contextMapping.getGln()) { List supplierNumber = supplierContactsUtil.getSupplierNumbersForGln( contextMapping.getCountry(userRole).get(0), salesline.get(0), contextMapping.getGln()); mmsSupplierNoSet = new HashSet<>(supplierNumber); } countrySet = new HashSet<>(contextMapping.getCountry(userRole)); if (null != contextMapping.getSupplierBusinessDepartment()) { businessDepartmentSet = new HashSet<>(contextMapping.getSupplierBusinessDepartment()); } } countryList.addAll(countrySet); saleslineList.addAll(saleslineSet); mmsSupplierNoList.addAll(mmsSupplierNoSet); if (null != businessDepartmentSet) { businessDepartmentList.addAll(businessDepartmentSet); } LOGGER.debug("Leaving method getCountrySaleslineSupplierNoDetails in ManagrUserServiceUtil"); } /** * Get Salesline for country code from listing system * * @param country * @param roleId * @return */ private String getSaleslineForCountryCode(List country) { Map tenantList = listingSystemInfoUtil.getTenantForCountryCode(country); return tenantList.entrySet().iterator().next().getValue(); } /** * This method checks whether the seletected lsiting system supplier present for * the user * * @param email * @param country * @param salesline * @param mmsSupplierNo */ public boolean checkSupplierExistsForUser(AddUserRoleRequest addUserRoleRequest) { LOGGER.debug("Entered method checkSupplierExistsForUser in ManagrUserServiceUtil"); boolean checkSupplierPresent = false; List userRoleList = nspUserRoleDao.fetchUserRoles(addUserRoleRequest.getMmsSupplierNumber(), addUserRoleRequest.getCountry(), addUserRoleRequest.getSalesline(), ServiceEnum.valueOf(prepareEnumKey(addUserRoleRequest.getServiceName())).role(), UserType.SUPP.getUserType()); userRoleList = userRoleList.stream() .filter(userRole -> userRole.getUserId().equalsIgnoreCase(addUserRoleRequest.getEmail())) .collect(Collectors.toList()); if (null != userRoleList && !userRoleList.isEmpty()) checkSupplierPresent = true; LOGGER.debug("Leaving method checkSupplierExistsForUser in ManagrUserServiceUtil"); return checkSupplierPresent; } /** * * @param removeRoleRequest * @param userRoleList * @return * @throws UserManagementServiceException */ public Response removeRoleAndUpdateDetails(RemoveUserRoleRequest removeRoleRequest, List userRoleList) throws UserManagementServiceException { LOGGER.debug("Entered method removeRoleAndUpdateDetails in ManagrUserServiceUtil"); Response response; Set roleSetForRemoveSupplier = new HashSet<>(); try { response = new Response(); String serviceName = prepareEnumKey(removeRoleRequest.getServiceName()); roleSetForRemoveSupplier = prepareContextForRemoveRole( getRoleBasedOnService(removeRoleRequest.getCountry(), serviceName)); UserServiceTransactionDto userServiceTransactionDto = new UserServiceTransactionDto(); userServiceTransactionDto = (UserServiceTransactionDto) beanUtil .copyObjectProperties(userServiceTransactionDto, removeRoleRequest); boolean isIDAMSuccess = processUserInIDAM(userServiceTransactionDto, userRoleList, roleSetForRemoveSupplier); LOGGER.info("ManagrUserServiceUtil : removeRoleAndUpdateDetails : isIDAMSuccess :: {}", isIDAMSuccess); if (isIDAMSuccess) { boolean isUserDeleted = deleteNspUserRole(removeRoleRequest); LOGGER.info("ManagrUserServiceUtil : removeRoleAndUpdateDetails : isUserDeleted :::: {}", isUserDeleted); if (isUserDeleted) { response.setStatusCode(HttpStatusCode.SUCCESS_CODE); response.setStatusMessage("Supplier removed Successfully"); } } else { LOGGER.info("ManagrUserServiceUtil : removeRoleAndUpdateDetails :Failed to remove the role from user"); response.setStatusCode(HttpStatusCode.STATUS_CODE_500); response.setStatusMessage(UserManagementServiceConstants.SUPPLIER_NOT_DELETED_ERROR_MSG); } } catch (UserAuthException e) { LOGGER.error("IDAM Exception ::: {}", e); throw new UserManagementServiceException(e.getMessage(), e); } catch (SupplierCompanyDataException | NspUserManagementDataException | SupplierContactsDataException e) { LOGGER.error("Supplier not removed. Please raise support request: {} ", e); throw new UserManagementServiceException("Supplier not removed. Please raise support request : {}", e); } LOGGER.debug("Leaving method removeRoleAndUpdateDetails in ManagrUserServiceUtil"); return response; } private String getRoleBasedOnService(String country, String serviceName) { if ("SUPPLIER_ONBOARDING".equalsIgnoreCase(serviceName) && "INT".equalsIgnoreCase(country)) { return NspUserRoles.INT_SUPPLIER_ADMIN.getUserRole(); } else { return ServiceEnum.valueOf(prepareEnumKey(serviceName)).role(); } } public boolean checkUserRolePresentForListingSystem(String country, String salesLine, String userId) throws NspUserManagementDataException { LOGGER.debug("Entered method checkUserRolePresentForListingSystem in ManagrUserServiceUtil"); List userRoleListForUserAndListingSystem; boolean isUserRoleNotPresent = false; userRoleListForUserAndListingSystem = nspUserRoleDao.fetchUserRoles(userId, null); if (null != userRoleListForUserAndListingSystem && !userRoleListForUserAndListingSystem.isEmpty()) { userRoleListForUserAndListingSystem = userRoleListForUserAndListingSystem.stream() .filter(obj -> country.equalsIgnoreCase(obj.getNspUserRolePrimaryKey().getCountry()) && salesLine.equalsIgnoreCase(obj.getNspUserRolePrimaryKey().getSalesLine())) .collect(Collectors.toList()); } if (CollectionUtils.isEmpty(userRoleListForUserAndListingSystem)) { LOGGER.debug("no record present in userRole for user for country and salesline {} {} {}", userId, country, salesLine); isUserRoleNotPresent = true; } LOGGER.debug("Exit method checkUserRolePresentForListingSystem in ManagrUserServiceUtil"); return isUserRoleNotPresent; } public boolean processUserInIDAM(UserServiceTransactionDto removeRoleRequest, List userRoleList, Set roleSetForRemoveSupplier) throws UserAuthException { boolean isIDAMSuccess = false; try { if (CollectionUtils.isEmpty(userRoleList)) { RemoveRoleResponse removeRoleResponse = userAuthServiceWrapper.removeRole(removeRoleRequest.getEmail(), roleSetForRemoveSupplier); if (null != removeRoleResponse && (removeRoleResponse.getStatus() == 200 || removeRoleResponse.getStatus() == 201)) { isIDAMSuccess = true; } } else { UpdateUserRoleRequest updateUserRequest = new UpdateUserRoleRequest(); String serviceName = prepareEnumKey(removeRoleRequest.getServiceName()); /** * Role is not present for int admin in service enum.so setting it explicitly */ String role; if (removeRoleRequest.getCountry().equalsIgnoreCase(CompanyManagementConstants.COUNTRY_INT) && serviceName.equalsIgnoreCase(UserManagementServiceConstants.SUPP_ONBOARDING)) { role = NspUserRoles.INT_SUPPLIER_ADMIN.getUserRole(); } else { role = ServiceEnum.valueOf(serviceName).role(); } updateUserRequest.setRole(role); updateUserRequest.setEmailId(removeRoleRequest.getEmail()); UpdateUserRoleContext context = createContextForIdam(userRoleList, roleSetForRemoveSupplier, serviceName); updateUserRequest.setUpdateUserContext(context); UserRoleResponse updateUserRoleResponse = userAuthServiceWrapper .updateUserRoleDetails(updateUserRequest); LOGGER.info("status from IDAM in processUserInIDAM :: {}", updateUserRoleResponse.getStatus()); if (updateUserRoleResponse.getStatus() == 200) { isIDAMSuccess = true; } } } catch (SupplierCompanyDataException e) { LOGGER.error("Error in processUserInIDAM in ManageUSerServiceUtil {}"); throw new UserAuthException("Exception in IDAM", e); } return isIDAMSuccess; } private UpdateUserRoleContext createContextForIdam(List userRoleList, Set roleSetForRemoveSupplier, String serviceName) throws SupplierCompanyDataException { UpdateUserRoleContext context = new UpdateUserRoleContext(); context.setUserType(roleSetForRemoveSupplier.iterator().next().getUserType()); if (CommonConstants.DOC.equalsIgnoreCase(serviceName)) { Map userRoleSet = prepareUserRoleContextForAssignSBDRoleIdam(userRoleList); UserRole role = userRoleSet.get(ServiceEnum.valueOf(serviceName).role()); Map uniqueMap = new HashMap<>(); List contextMappings = new ArrayList<>(); for (ContextMapping newContextMapping : role.getContextMappings()) { String newSBDdept = newContextMapping.getSupplierBusinessDepartment().get(0); String country = newContextMapping.getCountry().get(0); String salesline = newContextMapping.getSalesLine().get(0); String uniqueMatchforRemove = country + "_" + salesline + "_" + newSBDdept; if (uniqueMap.containsKey(uniqueMatchforRemove)) { uniqueMap.get(uniqueMatchforRemove).getSupplierNumber() .addAll(newContextMapping.getSupplierNumber()); } else { uniqueMap.put(country + "_" + salesline + "_" + newSBDdept, newContextMapping); } } uniqueMap.entrySet().forEach(entry -> contextMappings.add(entry.getValue())); context.setContextMappings(contextMappings); } else { Map userRoleSet = prepareUserRoleContextForAssignRoleIdam(userRoleList); String service = serviceName; service = prepareEnumKey(serviceName); UserRole role = userRoleSet.get(ServiceEnum.valueOf(service).role()); if (UserManagementServiceConstants.SUPP_ONBOARDING.equalsIgnoreCase(service)) { if (null == role) { role = userRoleSet.get(NspUserRoles.INT_SUPPLIER_ADMIN.getUserRole()); } else { List contextOfAdmin = userAuthServiceUtil .checkAndPrepareConsolidateContext(role.getContextMappings(), role.getRoleId()); role.setContextMappings(contextOfAdmin); } } context.setContextMappings(role.getContextMappings()); } return context; } private Map prepareUserRoleContextForAssignSBDRoleIdam(List userRoleList) { Map userRoleMap = new HashMap<>(); Set userSBDRoleList = new HashSet<>(); Set uniqueSBDdepartments = getUniqueSBDdepartments(userRoleList); for (String sbdDepartment : uniqueSBDdepartments) { if (userRoleMap.isEmpty()) { UserRole userRole = new UserRole(); List contextMappingForSBDListFirst = new ArrayList<>(); createSBDcontextNewRole(contextMappingForSBDListFirst, userSBDRoleList, userRoleList, sbdDepartment, userRole); userRoleMap.put(NspUserRoles.NSP_SUPPLIER_SL_COUNTRY_DEPT.getUserRole(), userRole); } else { /** Add the Supplier to the existing SBD role */ UserRole userRole = userRoleMap.get(NspUserRoles.NSP_SUPPLIER_SL_COUNTRY_DEPT.getUserRole()); List contextMappingForSBDList = userRole.getContextMappings(); createSBDcontext(contextMappingForSBDList, userRoleList, sbdDepartment); userRole.setContextMappings(contextMappingForSBDList); } } LOGGER.debug("User Creation formSBDUserContext uniqueSBDdepartments {}", uniqueSBDdepartments); LOGGER.debug("User Creation formSBDUserContext userSBDRoleList size {}", userSBDRoleList.size()); return userRoleMap; } private void createSBDcontextNewRole(List contextMappingForSBDListFirst, Set userSBDRoleList, List userRoleList, String sbdDepartment, UserRole userSBDRole) { userSBDRole.setRoleId(NspUserRoles.NSP_SUPPLIER_SL_COUNTRY_DEPT.getUserRole()); userSBDRole.setUserType(UserType.SUPP.toString()); createSBDcontext(contextMappingForSBDListFirst, userRoleList, sbdDepartment); userSBDRole.setContextMappings(contextMappingForSBDListFirst); userSBDRoleList.add(userSBDRole); } private void createSBDcontext(List contextMappingForSBDList, List userRoleList, String sbdDepartment) { for (NspUserRole nspUserRole : userRoleList) { if (nspUserRole.getBusinessDepartment().contains(sbdDepartment)) { ContextMapping contextMappingForSBD = new ContextMapping(); // Need to check if country/salesline is different contextMappingForSBD.setCountry(getList(nspUserRole.getNspUserRolePrimaryKey().getCountry())); contextMappingForSBD.setSalesLine(getList(nspUserRole.getNspUserRolePrimaryKey().getSalesLine())); contextMappingForSBD.setSupplierNumber(getList(nspUserRole.getMmsSupplierNumber())); contextMappingForSBD.setSupplierCompanyName(nspUserRole.getSupplierCompany()); contextMappingForSBD.setSupplierBusinessDepartment(getList(sbdDepartment)); contextMappingForSBDList.add(contextMappingForSBD); } } } private Set getUniqueSBDdepartments(List userRoleList) { Set uniqueSBDdepartments = new HashSet<>(); List> sBDdepartmentsList = userRoleList.stream().map(NspUserRole::getBusinessDepartment) .collect(Collectors.toList()); sBDdepartmentsList.stream().forEach(obj -> { for (String sBDdepartments : obj) { uniqueSBDdepartments.add(sBDdepartments); } }); return uniqueSBDdepartments; } /** * Get List from String. * * @param value * @return */ private List getList(String value) { List list = new ArrayList<>(); list.add(value); return list; } public String prepareEnumKey(String value) { String key = value; if (null != key && !key.isEmpty()) { key = key.replaceAll(" ", "_").toUpperCase(); } return key; } public String createServiceRequestId() { SimpleDateFormat sdf = new SimpleDateFormat(UserManagementServiceConstants.DATE_FORMAT); String date = sdf.format(new Date()); return "NSP" + date; } /** * In this method we will remove the role from the userRoleList based on the * matching criteria of the input request. * * @param removeRoleRequest * @param userRoleList */ public List removeRoleFromList(RemoveUserRoleRequest removeRoleRequest, List userRoleList) { LOGGER.debug("Entering method removeRoleFromList in ManagrUserServiceUtil"); String serviceName = prepareEnumKey(removeRoleRequest.getServiceName()); userRoleList.removeIf(user -> user.getMmsSupplierNumber().equals(removeRoleRequest.getMmsSupplierNumber()) && user.getNspUserRolePrimaryKey().getNspRole().equals(ServiceEnum.valueOf(serviceName).role()) && user.getNspUserRolePrimaryKey().getCountry().equals(removeRoleRequest.getCountry()) && user.getNspUserRolePrimaryKey().getSalesLine().equals(removeRoleRequest.getSalesline())); LOGGER.debug("Leaving method removeRoleFromList in ManagrUserServiceUtil"); return userRoleList; } private boolean deleteNspUserRole(RemoveUserRoleRequest removeRoleRequest) throws NspUserManagementDataException, SupplierContactsDataException, SupplierCompanyDataException { LOGGER.debug("Entered method deleteNspUserRole in ManagrUserServiceUtil"); boolean isContactUpdated = false; NspUserRole userRole = fetchNspUserRoleForSupplierNoSalesline(removeRoleRequest); boolean isDeleted = nspUserRoleDao.deleteUserRole(userRole); LOGGER.info("isDeleted in userRole DB :: {}", isDeleted); if (isDeleted) { UserServiceTransactionDto userServiceTransactionDto = new UserServiceTransactionDto(); userServiceTransactionDto = (UserServiceTransactionDto) beanUtil .copyObjectProperties(userServiceTransactionDto, removeRoleRequest); saveTransactionDetails(userServiceTransactionDto, userRole.getServiceRequestId(), UserManagementServiceConstants.REMOVE_SERVICE); /* Role successfully deleted in DB */ boolean isDeletedInSolr = deleteUserRoleInSolr(userRole, removeRoleRequest.getEmail()); LOGGER.info("isDeletedInSolr in userRole solr :: {}", isDeletedInSolr); if (isDeletedInSolr) { /* Successfully deleted user role details in userRoleService solr schema */ isContactUpdated = removeSupplierFromContacts(removeRoleRequest); LOGGER.info("isContactUpdated ::: {}", isContactUpdated); } } LOGGER.debug("Leaving method deleteNspUserRole in ManagrUserServiceUtil"); return isContactUpdated; } /** * In this method we will remove the supplier details from contact * * @param removeRoleRequest * @return * @throws SupplierContactsDataException * @throws SupplierCompanyDataException * @throws NspUserManagementDataException */ public boolean removeSupplierFromContacts(RemoveUserRoleRequest removeRoleRequest) throws NspUserManagementDataException { LOGGER.debug("Entered method removeSupplierFromContacts in ManagrUserServiceUtil"); boolean flag = false; try { List supplierContactsForGivenId = supplierContactsDBDao .getSupplierContacts(removeRoleRequest.getEmail()); List supplierContactsFiltered = supplierContactsUtil .filterActiveUsers(supplierContactsForGivenId); SupplierContactsEntity supplierContactsEntity = supplierContactsFiltered.get(0); List mmsSupplierNoList = Arrays.asList(removeRoleRequest.getMmsSupplierNumber()); List supplierCompanyList = supplierCompanyDao.fetchSupplierCompanies(mmsSupplierNoList, removeRoleRequest.getCountry(), removeRoleRequest.getSalesline()); List supplierCompanys = supplierCompanyDao .fetchSupplierCompanies(supplierCompanyList.get(0).getParentId()); List companyNameList = supplierCompanys.stream() .filter(obj -> RegistrationConstants.PARENT.equalsIgnoreCase(obj.getSupplierType())) .map(SupplierCompany::getSupplierCompanyName).collect(Collectors.toList()); List userRoleList = nspUserRoleDao.fetchUserRoles(removeRoleRequest.getEmail(), null); if (CollectionUtils.isEmpty(userRoleList)) { LOGGER.debug( "ManagrUserServiceUtil : removeSupplierFromContacts : No Roles present for the supplier. So deleting the contacts in DB as well as solr"); boolean isContactDeleted = supplierContactsDBDao.deleteUserContact(supplierContactsEntity); if (isContactDeleted) { List contactIdList = Arrays .asList(supplierContactsEntity.getSupplierContactPrimaryKey().getContactId().toString()); flag = supplierContactSolrDao.deleteContactInSolr(contactIdList); } } else { LOGGER.debug( "ManagrUserServiceUtil : removeSupplierFromContacts : Roles present for supplier user so conditionally updating his contact details"); checkDetailsForContactUpdate(removeRoleRequest, supplierContactsEntity, supplierCompanyList, companyNameList, userRoleList); checkBusinessDeptForContactUpdate(supplierContactsEntity, userRoleList); List supplierContactsEntityList = Arrays.asList(supplierContactsEntity); if (!supplierContactsEntityList.isEmpty()) flag = supplierContactsDBDao.saveSupplierContacts(supplierContactsEntityList); if (flag) { supplierContactsUtil.formSolrDtoAndSaveRecords(supplierContactsEntityList); LOGGER.debug( "Updating the supplier contacts in solr after successfully removing the supplier details removed {}", supplierContactsEntityList); } } } catch (SupplierContactsDataException | SupplierCompanyDataException e) { LOGGER.error("Exception occurred in removeSupplierFromContacts from ManageUserServiceUtil {}"); throw new NspUserManagementDataException("Exception occurred while removing supplier contacts", e); } LOGGER.debug("flag ::: {}", flag); LOGGER.debug("Leaving method removeSupplierFromContacts in ManagrUserServiceUtil"); return flag; } private void checkBusinessDeptForContactUpdate(SupplierContactsEntity supplierContactsEntity, List userRoleList) { LOGGER.debug("Entered method checkBusinessDeptForContactUpdate in ManagrUserServiceUtil"); if (CollectionUtils.isNotEmpty(userRoleList)) { Set businessDepartSet = new HashSet<>(); List updatedBusinessDept = new ArrayList<>(); List filteredUserRoleList = userRoleList.stream() .filter(role -> role.getNspUserRolePrimaryKey().getNspRole() .equalsIgnoreCase(RegistrationConstants.NSP_SUPPLIER_SL_COUNTRY_DEPT)) .collect(Collectors.toList()); filteredUserRoleList.stream().forEach(role -> businessDepartSet.addAll(role.getBusinessDepartment())); updatedBusinessDept.addAll(businessDepartSet); supplierContactsEntity.setBusinessDepartment(updatedBusinessDept); } LOGGER.debug("Leaving method checkBusinessDeptForContactUpdate in ManagrUserServiceUtil"); } private void checkDetailsForContactUpdate(RemoveUserRoleRequest removeRoleRequest, SupplierContactsEntity supplierContactsEntity, List supplierCompanyList, List companyNameList, List userRoleList) throws SupplierCompanyDataException { LOGGER.debug("Entered method checkDetailsForContactUpdate in ManagrUserServiceUtil"); /* * Removing country if the removed suppNo country is not associated with other * supplier users */ List filteredBasedOnCountry = userRoleList.stream().filter(userRole -> userRole .getNspUserRolePrimaryKey().getCountry().equalsIgnoreCase(removeRoleRequest.getCountry())) .collect(Collectors.toList()); if (null == filteredBasedOnCountry || filteredBasedOnCountry.isEmpty()) { supplierContactsEntity.getCountry().remove(removeRoleRequest.getCountry()); } /* * Removing country if the removed salesline is not associated with other * supplier users */ List filteredBasedOnSalesline = userRoleList.stream().filter(userRole -> userRole .getNspUserRolePrimaryKey().getSalesLine().equalsIgnoreCase(removeRoleRequest.getSalesline())) .collect(Collectors.toList()); if (null == filteredBasedOnSalesline || filteredBasedOnSalesline.isEmpty()) { supplierContactsEntity.getSalesline().remove(removeRoleRequest.getSalesline()); } /* * Removing the suppNo if the removed suppNo is not associated with other * supplier users in his context */ List filteredBasedOnSuppNo = userRoleList.stream() .filter(userRole -> null != userRole.getMmsSupplierNumber() && userRole.getMmsSupplierNumber().equalsIgnoreCase(removeRoleRequest.getMmsSupplierNumber())) .collect(Collectors.toList()); if (null == filteredBasedOnSuppNo || filteredBasedOnSuppNo.isEmpty()) { supplierContactsEntity.getMmsSupplierNumber().remove(removeRoleRequest.getMmsSupplierNumber()); } /* Fetching the supplier companies based on parentId */ List suppCompanyList = supplierCompanyDao .fetchSupplierCompanies(supplierCompanyList.get(0).getParentId()); boolean isParentNotPresent = true; /* * Below condition we validate whether the parentId is associated with any * supplier users before removing from his contact details */ for (int i = 0; i < userRoleList.size(); i++) { for (int j = 0; j < suppCompanyList.size(); j++) { if (this.checkCountrySaleslineAndSupplierNumAreSame(i, j, suppCompanyList, userRoleList)) { isParentNotPresent = false; i = userRoleList.size(); j = suppCompanyList.size(); } } } LOGGER.debug("ManagrUserServiceUtil : checkDetailsForContactUpdate : isParentNotPresent ::: {}", isParentNotPresent); if (isParentNotPresent) { supplierContactsEntity.getParentSupplierId().remove(supplierCompanyList.get(0).getParentId()); supplierContactsEntity.getCompanyName().removeAll(companyNameList); } LOGGER.debug("Leaving method checkDetailsForContactUpdate in ManagrUserServiceUtil"); } /* * This Methods checks whether the supplierNumber is present or not and Below * condition we validate whether the parentId is associated with any supplier * users before removing from his contact details */ private boolean checkCountrySaleslineAndSupplierNumAreSame(int i, int j, List suppCompanyList, List userRoleList) { boolean isCountrySaleslineAndSupplierNumAreSame = false; if (StringUtils.isNotBlank(userRoleList.get(i).getMmsSupplierNumber())) { isCountrySaleslineAndSupplierNumAreSame = userRoleList.get(i).getMmsSupplierNumber() .equals(suppCompanyList.get(j).getSupplierCompanyPrimaryKey().getMmsSupplierNumber()) && userRoleList.get(i).getNspUserRolePrimaryKey().getCountry() .equals(suppCompanyList.get(j).getSupplierCompanyPrimaryKey().getCountry()) && userRoleList.get(i).getNspUserRolePrimaryKey().getSalesLine() .equals(suppCompanyList.get(j).getSupplierCompanyPrimaryKey().getSalesline()); } return isCountrySaleslineAndSupplierNumAreSame; } public boolean deleteUserRoleInSolr(NspUserRole userRole, String email) throws NspUserManagementDataException { LOGGER.debug("Entered method deleteUserRoleInSolr in ManageUserServiceUtil"); boolean isUpdateAndDeleteInSolr = false; try { String uniqueId = buildUserRoleUniqueKey(userRole); List uniqueIdList = new ArrayList<>(); uniqueIdList.add(uniqueId); boolean isDeletedInUserRoleServiceSolr = manageUserSolrService.deleteUserRoleInSolr(uniqueIdList, userRole.getNspUserRolePrimaryKey().getCountry(), userRole.getNspUserRolePrimaryKey().getSalesLine()); LOGGER.debug("isDeletedInUserRoleServiceSolr :: {}", isDeletedInUserRoleServiceSolr); if (isDeletedInUserRoleServiceSolr) { /* * Successfully deleted user role details in userRoleService solr schema and now * checking if any userRole present for user and listing system */ boolean isUserRoleNotPresent = checkUserRolePresentForListingSystem( userRole.getNspUserRolePrimaryKey().getCountry(), userRole.getNspUserRolePrimaryKey().getSalesLine(), userRole.getUserId()); if (isUserRoleNotPresent) { isUpdateAndDeleteInSolr = updateUserSolr(userRole, email); LOGGER.debug( "updating the user in userSolrSchema as there is no role present for the country and salesline for user {} {}", userRole.getUserId(), isUpdateAndDeleteInSolr); } else { isUpdateAndDeleteInSolr = true; } } } catch (SolrException e) { LOGGER.error("Failed to delete userRoleService data in solr :: {}", e); this.saveSolrRecords(userRole, "Delete", "userRoleServiceCollection"); } LOGGER.debug("Leaving method deleteUserRoleInSolr in ManageUserServiceUtil"); return isUpdateAndDeleteInSolr; } private boolean updateUserSolr(NspUserRole userRole, String email) { LOGGER.debug("Entered method updateUserSolr in ManageUserServiceUtil"); UserSolrEntity userSolr; boolean isUpdated = false; UserServiceDetailsRequest userServiceDetailsRequest = new UserServiceDetailsRequest(); userServiceDetailsRequest.setEmail(email); SolrSearchResultDto solrSearchResultDto = userManagementSolrDao .fetchUserDetailsFromSolr(userServiceDetailsRequest); if (null != solrSearchResultDto.getSearchResults() && !solrSearchResultDto.getSearchResults().isEmpty()) { userSolr = (UserSolrEntity) solrSearchResultDto.getSearchResults().get(0); /* remove if listing system present */ removeListingSystemPresent(userRole, userSolr); SolrInputDocument solrDocToUpdate = new SolrInputDocument(); solrDocToUpdate.addField(UserManagementServiceConstants.USER_ID, userSolr.getUserId()); HashMap statusMap = new HashMap<>(); statusMap.put("set", userSolr.getListingSystemName()); solrDocToUpdate.addField(UserManagementServiceConstants.LISTING_SYSTEM_NAME, statusMap); isUpdated = manageUserSolrService.updateUserInSolr(solrDocToUpdate, userRole.getNspUserRolePrimaryKey().getCountry(), userRole.getNspUserRolePrimaryKey().getSalesLine()); } LOGGER.debug("Leaving method updateUserSolr in ManageUserServiceUtil"); return isUpdated; } private void removeListingSystemPresent(NspUserRole userRole, UserSolrEntity userSolr) { LOGGER.debug("Entering method removeListingSystemPresent in ManageUserServiceUtil"); if (userSolr.getListingSystemName() .contains(listingSystemInfoUtil.getListingSystem(userRole.getNspUserRolePrimaryKey().getCountry(), userRole.getNspUserRolePrimaryKey().getSalesLine()))) { userSolr.getListingSystemName() .remove(listingSystemInfoUtil.getListingSystem(userRole.getNspUserRolePrimaryKey().getCountry(), userRole.getNspUserRolePrimaryKey().getSalesLine())); } LOGGER.debug("Leaving method removeListingSystemPresent in ManageUserServiceUtil"); } private void saveSolrRecords(NspUserRole userRole, String operation, String module) { LOGGER.debug("Entered method saveSolrRecords in ManageUserServiceUtil"); try { SolrFailedRecords solrFailedRecords = new SolrFailedRecords(); solrFailedRecords.setCountry(userRole.getNspUserRolePrimaryKey().getCountry()); solrFailedRecords.setSalesline(userRole.getNspUserRolePrimaryKey().getSalesLine()); Date date = new Date(); solrFailedRecords.setCreatedDate(date); solrFailedRecords.setModifiedDate(date); solrFailedRecords.setModule(module); solrFailedRecords.setOperation(operation); solrFailedRecords.setStatus(false); solrFailedRecords.setSolrRecord(jsonUtil.writeJsonString(userRole)); solrFailureDao.saveErrorRecord(solrFailedRecords); } catch (UtilException e) { LOGGER.error("ManageUserServiceUtil : Exception: {}", e); } LOGGER.debug("Leaving method saveSolrRecords in ManageUserServiceUtil"); } /** * In this method we form the unique to delete the user role in solr. * * @param userRole * @return */ private String buildUserRoleUniqueKey(NspUserRole userRole) { String listingSystem = listingSystemInfoUtil.getListingSystem(userRole.getNspUserRolePrimaryKey().getCountry(), userRole.getNspUserRolePrimaryKey().getSalesLine()); String uniqueId = userRole.getUserId() + "_" + listingSystem + "_" + userRole.getNspUserRolePrimaryKey().getNspRole() + "_" + userRole.getMmsSupplierNumber(); LOGGER.debug("ManageUserServiceUtil : buildUserRoleUniqueKey : generated uniqueId ::: {}", uniqueId); return uniqueId; } private NspUserRole fetchNspUserRoleForSupplierNoSalesline(RemoveUserRoleRequest removeRoleRequest) { List userRoleList = nspUserRoleDao.fetchUserRoles(removeRoleRequest.getMmsSupplierNumber(), removeRoleRequest.getCountry(), removeRoleRequest.getSalesline(), getRoleBasedOnService(removeRoleRequest.getCountry(), removeRoleRequest.getServiceName()), UserType.SUPP.getUserType()); userRoleList = userRoleList.stream() .filter(userRole -> userRole.getUserId().equalsIgnoreCase(removeRoleRequest.getEmail())) .collect(Collectors.toList()); return userRoleList.get(0); } public Map prepareUserRoleContextForAssignRoleIdam(List userRoleList) throws SupplierCompanyDataException { LOGGER.debug("Entered method prepareUserRoleContextForAssignRoleIdam in ManageUserServiceUtil"); Map userRoleMap = new HashMap<>(); for (NspUserRole nspUserRole : userRoleList) { SupplierUser supplierUser = new SupplierUser(); supplierUser.setCountry(nspUserRole.getNspUserRolePrimaryKey().getCountry()); supplierUser.setSalesLine(nspUserRole.getNspUserRolePrimaryKey().getSalesLine()); supplierUser.setMmsSupplierNumber(nspUserRole.getMmsSupplierNumber()); supplierUser.setSupplierCompany(nspUserRole.getSupplierCompany()); String serviceName = nspUserRole.getServiceName(); ContextMapping contextMappingForService = jsonUtil.readJsonString(nspUserRole.getServiceParameters(), ContextMapping.class); // Appname for INT SA if (NspUserRoles.INT_SUPPLIER_ADMIN.getUserRole() .equalsIgnoreCase(nspUserRole.getNspUserRolePrimaryKey().getNspRole()) && CommonConstants.SUPPLIER_ONBOARDING.equalsIgnoreCase(serviceName)) { supplierUser.setAppName(contextMappingForService.getAppName().get(0)); LOGGER.info("App name setting for context {}", supplierUser.getAppName()); } else { supplierUser.setAppName(nspUserRole.getServiceName()); } supplierUser.setNspRole(nspUserRole.getNspUserRolePrimaryKey().getNspRole()); supplierUser.setBusinessDepartment(nspUserRole.getBusinessDepartment()); if (null != nspUserRole.getServiceName() && nspUserRole.getServiceName().equalsIgnoreCase(CommonConstants.MEC) || nspUserRole.getServiceName().equalsIgnoreCase(CommonConstants.MCAT)) { supplierUser.setGln(StringUtils.join(contextMappingForService.getGln(), ",")); } if (userRoleMap.isEmpty()) { UserRole userRole = new UserRole(); userRole.setUserType(UserType.SUPP.getUserType()); userRole.setRoleId(nspUserRole.getNspUserRolePrimaryKey().getNspRole()); List contextList = new ArrayList<>(); contextList.add(this.getContextMapping(supplierUser, new ContextMapping())); userRole.setContextMappings(contextList); userRoleMap.put(supplierUser.getNspRole(), userRole); } else { UserRole userRole = userRoleMap.get(supplierUser.getNspRole()); List contextMappingList = userRole.getContextMappings(); ContextMapping contextMapping = this.getContextMapping(supplierUser, new ContextMapping()); contextMappingList.add(contextMapping); } } LOGGER.debug("Leaving method prepareUserRoleContextForAssignRoleIdam in ManageUserServiceUtil"); return userRoleMap; } private void prepareContextForSBD(SupplierUser supplierUser, UserRole userRole) throws SupplierCompanyDataException { Set userSBDRoleList = new HashSet<>(); for (String sbdDepartment : supplierUser.getBusinessDepartment()) { List userSBDRoles = userSBDRoleList.stream() .filter(userRoleObj -> userRoleObj.getRoleId() .equalsIgnoreCase(NspUserRoles.NSP_SUPPLIER_SL_COUNTRY_DEPT.getUserRole())) .collect(Collectors.toList()); if (!userSBDRoles.isEmpty()) { /** Add the Supplier to the existing SBD role */ UserRole userRoleSbd = userSBDRoles.get(0); List contextMappingForSBDList = userRoleSbd.getContextMappings(); supplierUser.setBusinessDepartment(Arrays.asList(sbdDepartment)); userRoleSbd.setContextMappings( this.getContextMappingList(supplierUser, new ContextMapping(), contextMappingForSBDList)); } else { List contextMappingForSBDList = new ArrayList<>(); supplierUser.setBusinessDepartment(Arrays.asList(sbdDepartment)); userRole.setContextMappings( this.getContextMappingList(supplierUser, new ContextMapping(), contextMappingForSBDList)); userSBDRoleList.add(userRole); } } } @SuppressWarnings("unchecked") public Response checkContextAndAdmin(AddUserRoleRequest addUserRoleRequest, Response response) throws SupplierCompanyDataException { Response checkContextAndAdminResponse = response; try { boolean contextCheck; boolean adminCheck; contextCheck = supplierNumberCheck(addUserRoleRequest); adminCheck = supplierAdminCheck(addUserRoleRequest); if (contextCheck && adminCheck) checkContextAndAdminResponse = (Response) responseUtil.getSuccessResponse(checkContextAndAdminResponse); else if (!adminCheck) { checkContextAndAdminResponse = (Response) responseUtil .getBadRequestResponse(checkContextAndAdminResponse); errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0007, checkContextAndAdminResponse); } else { checkContextAndAdminResponse = (Response) responseUtil .getBadRequestResponse(checkContextAndAdminResponse); errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0008, checkContextAndAdminResponse); } } catch (NspUserDataException | NspUserRegistrationDataException | NspUserManagementDataException e) { LOGGER.error("Exception Ocurred in method checkContextAndAdmin of ManageUserServiceUtil {}", e); } return checkContextAndAdminResponse; } @SuppressWarnings("unchecked") public MqualityServiceAssignmentResponse checkContextAndAdminForMquality(AddUserRoleRequest addUserRoleRequest, MqualityServiceAssignmentResponse response) throws SupplierCompanyDataException { MqualityServiceAssignmentResponse checkContextAndAdminResponse = response; LOGGER.info("Entered method for validating context for Mquality"); ContextMapper context = NspUserContext.get().getContextMapper(); String userId = context.getUpn(); try { boolean contextCheck; boolean adminCheck; contextCheck = supplierNumberCheck(addUserRoleRequest); adminCheck = supplierAdminCheck(addUserRoleRequest); if (contextCheck && adminCheck) checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getSuccessResponse(checkContextAndAdminResponse); else if (!adminCheck) { boolean checkMMSSupplierNumber = false; boolean checkContextMatch = false; // checking if secondary mms supplier number exists Map dbResultMap = checkForSecondaryMMSSupplier(addUserRoleRequest, checkMMSSupplierNumber); Map.Entry entry = dbResultMap.entrySet().iterator().next(); SupplierCompany intCompany = entry.getKey(); checkMMSSupplierNumber = entry.getValue(); if (null != intCompany.getSecondarySupplierNumber() && !intCompany.getSecondarySupplierNumber().isEmpty()) { Map secondaryCompanyMap = intCompany.getSecondarySupplierNumber(); checkContextAndAdminResponse = createResponseMqualityService(addUserRoleRequest, checkContextAndAdminResponse, userId, checkMMSSupplierNumber, checkContextMatch, secondaryCompanyMap); } else { checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getBadRequestResponse(checkContextAndAdminResponse); errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0007, checkContextAndAdminResponse); } } else if (adminCheck && (StringUtils.isNotEmpty(addUserRoleRequest.getAdminEmail())) && addUserRoleRequest.isAdminCreateCheck() && addUserRoleRequest.isAdminAssignCheck()) { checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getSuccessResponse(checkContextAndAdminResponse); } else { checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getBadRequestResponse(checkContextAndAdminResponse); errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0008, checkContextAndAdminResponse); } } catch (NspUserDataException | NspUserRegistrationDataException | NspUserManagementDataException e) { LOGGER.error("Exception Ocurred in method checkContextAndAdmin of ManageUserServiceUtil {}", e); } catch (NspCompanyManagementServiceException e) { LOGGER.error( "Exception Ocurred while fetching supplier Admins in method checkContextAndAdmin of ManageUserServiceUtil {}", e); } LOGGER.info("Leaving method for validating context for Mquality"); return checkContextAndAdminResponse; } @SuppressWarnings("unchecked") private MqualityServiceAssignmentResponse createResponseMqualityService(AddUserRoleRequest addUserRoleRequest, MqualityServiceAssignmentResponse checkContextAndAdminResponse, String userId, boolean checkMMSSupplierNumber, boolean checkContextMatch, Map secondaryCompanyMap) throws NspUserManagementDataException, SupplierCompanyDataException, NspCompanyManagementServiceException { MqualityServiceAssignmentResponse checkContextAdminResponse = checkContextAndAdminResponse; if ((null == addUserRoleRequest.getAdminEmail() || StringUtils.isEmpty(addUserRoleRequest.getAdminEmail())) && !addUserRoleRequest.isAdminCreateCheck() && !addUserRoleRequest.isAdminAssignCheck()) { /* 1st stage response */ checkContextAdminResponse = prepareNoAdminEmailResponse(checkContextAdminResponse, userId, checkMMSSupplierNumber, checkContextMatch, secondaryCompanyMap); } else if ((null != addUserRoleRequest.getAdminEmail() || StringUtils.isNotEmpty(addUserRoleRequest.getAdminEmail())) && addUserRoleRequest.isAdminCreateCheck() && !addUserRoleRequest.isAdminAssignCheck()) { checkContextAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getBadRequestResponse(checkContextAdminResponse); checkContextAdminResponse.setAdminEmail(addUserRoleRequest.getAdminEmail()); errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0014, checkContextAdminResponse); } return checkContextAdminResponse; } /* * this method prepares response for first stage when no suppler admin exists * when assigning mquality role to user */ @SuppressWarnings("unchecked") private MqualityServiceAssignmentResponse prepareNoAdminEmailResponse( MqualityServiceAssignmentResponse checkContextAndAdminResponse, String userId, boolean checkMMSSupplierNumber, boolean checkContextMatch, Map secondaryCompanyMap) throws NspUserManagementDataException, SupplierCompanyDataException, NspCompanyManagementServiceException { LOGGER.info("Entered method for preparing response for Mquality Service Assignment"); if (checkMMSSupplierNumber) { List userContextPortal = nspUserRoleDao.fetchUserRoles(userId, "NSP_METRO_PORTAL_ADMIN"); if (CollectionUtils.isEmpty(userContextPortal)) { List userContextCountry = nspUserRoleDao.fetchUserRoles(userId, "INT_METRO_COUNTRY_ADMIN"); /* * creates list of country with base location of logged in user */ List contextCountryList = createContextCountryList(userContextCountry); /* * creates list of country with mms supllier number country present in secondary * supplierNuber column of assigning user */ List countryList = createMMSCountryList(secondaryCompanyMap); // creates list of appNames of logged in user List contextAppList = createAppList(userContextCountry); /* * checks if appname is valid and country is matching with logged in user */ //aa Map> checkContextCountry = checkAppContextMatch(checkContextMatch, contextCountryList, countryList, contextAppList); Map.Entry> entry = checkContextCountry.entrySet().iterator().next(); /* * taking boolean key from map for validation of contexts */ checkContextMatch = entry.getKey(); List consideredCountryList = entry.getValue(); if (checkContextMatch) { /* * this method is checking if supplier admin present for particluar mms supplier * number and returns response */ checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) checkMMSSupplieAdmins( checkContextAndAdminResponse, secondaryCompanyMap, consideredCountryList); } else { errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0016, checkContextAndAdminResponse); checkContextAndAdminResponse.setStatusCode(HttpStatusCode.STATUS_CODE_500); checkContextAndAdminResponse .setStatusMessage(UserManagementServiceConstants.SUPPLIER_NOT_ADDED_ERROR_MSG); } } /* * when metro portal admin no need to check for context */ else { List contextCountryList = new ArrayList<>(); // creates list of country with mms supllier number country present in secondary // supplierNuber column of assigning user List countryList = createMMSCountryList(secondaryCompanyMap); // creates list of appNames of logged in user List contextAppList = new ArrayList<>(); // checks if appname is valid and country is matching with logged in user Map> checkContextCountry = checkAppContextMatch(checkContextMatch, contextCountryList, countryList, contextAppList); Map.Entry> entry = checkContextCountry.entrySet().iterator().next(); // taking boolean key from map for validation of contexts List consideredCountryList = entry.getValue(); // this method is checking if supplier admin present for particluar mms supplier // number and returns response checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) checkMMSSupplieAdmins( checkContextAndAdminResponse, secondaryCompanyMap, consideredCountryList); } } else { checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getBadRequestResponse(checkContextAndAdminResponse); errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0007, checkContextAndAdminResponse); } LOGGER.info("Leaving method for preparing response for Mquality Service Assignment"); return checkContextAndAdminResponse; } /* * this method is checking if supplier admin present for particluar mms supplier * number and returns response */ @SuppressWarnings("unchecked") private Response checkMMSSupplieAdmins(MqualityServiceAssignmentResponse checkContextAndAdminResponse, Map secondaryCompanyMap, List consideredCountryList) throws SupplierCompanyDataException, NspCompanyManagementServiceException { LOGGER.info("Entered method for creating MQuality service response"); for (Map.Entry entry : secondaryCompanyMap.entrySet()) { if (entry.getKey().equalsIgnoreCase(CommonConstants.MMSSUPPLIERNUMBER)) { String[] countrySupplierNumberSplit = entry.getValue().split("\\|"); checkContextAndAdminResponse = createMqualityServiceResponse(checkContextAndAdminResponse, countrySupplierNumberSplit, consideredCountryList); } } LOGGER.info("Entered method after creating MQuality service response"); return checkContextAndAdminResponse; } /* * // creates mquality service response for valid user */ @SuppressWarnings("unchecked") private MqualityServiceAssignmentResponse createMqualityServiceResponse( MqualityServiceAssignmentResponse checkContextAndAdminResponse, String[] countrySupplierNumberSplit, List consideredCountryList) throws SupplierCompanyDataException, NspCompanyManagementServiceException { LOGGER.info("Entered method for creating MQuality service response with or without context"); if (null == consideredCountryList || CollectionUtils.isEmpty(consideredCountryList)) { // this method creates response for logged in user who is having no country in // context checkContextAndAdminResponse = createMqualityServiceWithNoContextCountry(checkContextAndAdminResponse, countrySupplierNumberSplit); } else { // this method creates response for logged in user who is having country in // context checkContextAndAdminResponse = createMqualityServiceWithContextCountry(checkContextAndAdminResponse, countrySupplierNumberSplit, consideredCountryList); } LOGGER.info("Leaving method after creating MQuality service response with or without context"); return checkContextAndAdminResponse; } /* * // this method creates response for logged in user who is having no country * in context */ @SuppressWarnings("unchecked") private MqualityServiceAssignmentResponse createMqualityServiceWithContextCountry( MqualityServiceAssignmentResponse checkContextAndAdminResponse, String[] countrySupplierNumberSplit, List consideredCountryList) throws SupplierCompanyDataException, NspCompanyManagementServiceException { LOGGER.info("Entered method for creating MQuality service response with country present in context"); MqualityServiceAssignmentResponse checkContextAdminResponse = checkContextAndAdminResponse; for (String countrySupplierNumber : countrySupplierNumberSplit) { String[] countryMMSNumberSplit = countrySupplierNumber.split(":"); String mmsCountry = countryMMSNumberSplit[0]; // validation for valid countries matching with context checkContextAdminResponse = prepareSupplierAdminEmailResponse(checkContextAdminResponse, consideredCountryList, countryMMSNumberSplit, mmsCountry); // when we get the first suppler admin we are sending that first admin email // through response // not waiting for other verfication if (("MU0013").equalsIgnoreCase(checkContextAdminResponse.getErrorCode())) { break; } } LOGGER.info("Leaving method after creating MQuality service response with country present in context"); return checkContextAdminResponse; } @SuppressWarnings("unchecked") private MqualityServiceAssignmentResponse prepareSupplierAdminEmailResponse( MqualityServiceAssignmentResponse checkContextAndAdminResponse, List consideredCountryList, String[] countryMMSNumberSplit, String mmsCountry) throws SupplierCompanyDataException, NspCompanyManagementServiceException { if (consideredCountryList.contains(mmsCountry)) { String mmsSupplierNum = countryMMSNumberSplit[1]; SupplierCompany company = supplierCompanyDao.fetchSupplierCompany(mmsCountry, "MCC", mmsSupplierNum, true); if (null != company && null != company.getParentId()) { ManageSupplierAdminsRequest manageSupplierAdminsRequest = new ManageSupplierAdminsRequest(); manageSupplierAdminsRequest.setCountry(mmsCountry); manageSupplierAdminsRequest.setSalesline("MCC"); manageSupplierAdminsRequest.setParentId(company.getParentId()); ViewSupplierAdminsResponse viewSupplierAdminsResponse = companyManagementSASearchServiceImpl .fetchSupplierAdminDetails(manageSupplierAdminsRequest); // this method checks if supplier admin exists for particular parent id and // returns response accordingly checkContextAndAdminResponse = checkSupplierAdminExists(checkContextAndAdminResponse, viewSupplierAdminsResponse); } else { checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getBadRequestResponse(checkContextAndAdminResponse); errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0007, checkContextAndAdminResponse); } } else { checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getBadRequestResponse(checkContextAndAdminResponse); errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0007, checkContextAndAdminResponse); } return checkContextAndAdminResponse; } /* * this method checks if supplier admin exists for particular parent id and * returns response accordingly */ @SuppressWarnings("unchecked") private MqualityServiceAssignmentResponse checkSupplierAdminExists( MqualityServiceAssignmentResponse checkContextAndAdminResponse, ViewSupplierAdminsResponse viewSupplierAdminsResponse) { LOGGER.info("Entered method for validating if Supplier admin exists for particular Parent ID"); if (null != viewSupplierAdminsResponse.getSupplierAdminList() && CollectionUtils.isNotEmpty(viewSupplierAdminsResponse.getSupplierAdminList())) { checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getBadRequestResponse(checkContextAndAdminResponse); List supplierAdmins = viewSupplierAdminsResponse.getSupplierAdminList(); Set adminEmailSet = new HashSet<>(); /* * filtering by active supplier admins */ supplierAdmins.stream().filter( admin -> admin.getStatus().equals(CompanyManagementConstants.COMPANY_MANAGEMENT_ACTIVE_STATUS)) .forEach(admin -> adminEmailSet.add(admin.getAdminEmail())); List adminEmailList = new ArrayList(); for (String admin : adminEmailSet) { adminEmailList.add(admin); } Collections.sort(adminEmailList); String adminEmail = adminEmailList.get(0); checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getBadRequestResponse(checkContextAndAdminResponse); checkContextAndAdminResponse.setAdminEmail(adminEmail); errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0013, checkContextAndAdminResponse); } else { checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getBadRequestResponse(checkContextAndAdminResponse); errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0007, checkContextAndAdminResponse); } LOGGER.info("Leaving method after validating if Supplier admin exists for particular Parent ID"); return checkContextAndAdminResponse; } /* * / this method creates response for logged in user who is having no country in * context */ @SuppressWarnings("unchecked") private MqualityServiceAssignmentResponse createMqualityServiceWithNoContextCountry( MqualityServiceAssignmentResponse checkContextAndAdminResponse, String[] countrySupplierNumberSplit) throws SupplierCompanyDataException, NspCompanyManagementServiceException { LOGGER.info("Entered method for creating MQuality service response without any country present in context"); for (String countrySupplierNumber : countrySupplierNumberSplit) { String[] countryMMSNumberSplit = countrySupplierNumber.split(":"); String mmsCountry = countryMMSNumberSplit[0]; String mmsSupplierNum = countryMMSNumberSplit[1]; SupplierCompany company = supplierCompanyDao.fetchSupplierCompany(mmsCountry, "MCC", mmsSupplierNum, true); if (null != company && null != company.getParentId()) { ManageSupplierAdminsRequest manageSupplierAdminsRequest = new ManageSupplierAdminsRequest(); manageSupplierAdminsRequest.setCountry(mmsCountry); manageSupplierAdminsRequest.setSalesline("MCC"); manageSupplierAdminsRequest.setParentId(company.getParentId()); ViewSupplierAdminsResponse viewSupplierAdminsResponse = companyManagementSASearchServiceImpl .fetchSupplierAdminDetails(manageSupplierAdminsRequest); checkContextAndAdminResponse = checkSupplierAdminExists(checkContextAndAdminResponse, viewSupplierAdminsResponse); if (checkContextAndAdminResponse.getErrorCode().equalsIgnoreCase("MU0013")) { break; } } else { checkContextAndAdminResponse = (MqualityServiceAssignmentResponse) responseUtil .getBadRequestResponse(checkContextAndAdminResponse); errorUtil.getErrorCodeForManageUser(ErrorUtil.ERROR_CODE_0007, checkContextAndAdminResponse); } } LOGGER.info("Leaving method after creating MQuality service response without any country present in context"); return checkContextAndAdminResponse; } /* * checks if appname is valid and country is matching with logged in user and * returns map consists of boolean value and list of valid countries to consider * from mms supplier number */ private Map> checkAppContextMatch(boolean checkContextMatch, List contextCountryList, List countryList, List contextAppList) { LOGGER.info("Entered method for checking if context is matched for logged in user and assigning user"); Set considerCountry = new HashSet<>(); List considerCountryList = new ArrayList<>(); if (CollectionUtils.isEmpty(contextAppList) || (CollectionUtils.isNotEmpty(contextAppList) && contextAppList.contains("MQuality"))) { if (CollectionUtils.isEmpty(contextCountryList)) { checkContextMatch = true; } else if (CollectionUtils.isNotEmpty(contextCountryList) && CollectionUtils.containsAny(contextCountryList, countryList)) { checkContextMatch = true; // iterating through list of context countries and if found match storing into // list of valid countries considerCountryList = checkConsiderCountry(contextCountryList, countryList, considerCountry); } } Map> contextCountryMatch = new HashMap>(); contextCountryMatch.put(checkContextMatch, considerCountryList); LOGGER.info("Leaving method for checking if context is matched for logged in user and assigning user"); return contextCountryMatch; } /* * iterating through list of context countries and if found match storing into * list of valid countries */ private List checkConsiderCountry(List contextCountryList, List countryList, Set considerCountry) { for (String contextCountry : contextCountryList) { for (String country : countryList) { if (contextCountry.equalsIgnoreCase(country)) { considerCountry.add(country); } } } List considerCountryList = new ArrayList(); for (String country : considerCountry) { considerCountryList.add(country); } return considerCountryList; } /* * creates list of appNames of logged in user */ private List createAppList(List userContextCountry) { LOGGER.info("Entered method for creating App list from context of Logged in User"); List contextAppList = new ArrayList<>(); for (NspUserRole nspUserRole : userContextCountry) { String serviceParameter = nspUserRole.getServiceParameters(); String[] serviceParameters = serviceParameter.split("\\]\\,"); for (String parameter : serviceParameters) { String[] param = parameter.split(":"); String firstParameter = param[0].replaceAll("[^A-Za-z0-9]", ""); if (firstParameter.equalsIgnoreCase("appName")) { extractAppNames(contextAppList, param); } } } LOGGER.info("Leaving method for creating App list from context of Logged in User"); return contextAppList; } /* * This method extracts app names from service parameters * */ private void extractAppNames(List contextAppList, String[] param) { String secondParam = param[1].replaceAll("\\[", "").replaceAll("\\]", ""); String[] secondParams = secondParam.split(","); for (String secParam : secondParams) { contextAppList.add(secParam.replaceAll("[^A-Za-z0-9]", "")); } } /* * creates list of country with mms supllier number country present in secondary * supplierNuber column of assigning user */ private List createMMSCountryList(Map secondaryCompanyMap) { List countryList = new ArrayList<>(); for (Map.Entry entry : secondaryCompanyMap.entrySet()) { if (entry.getKey().equalsIgnoreCase(CommonConstants.MMSSUPPLIERNUMBER)) { String[] countrySupplierNumberSplit = entry.getValue().split("\\|"); // iterate through the array // separate each value by colon // store the left index i.e. 0 th in a list of string for (String countrySupplierNumber : countrySupplierNumberSplit) { String[] countryMMSNumberSplit = countrySupplierNumber.split(":"); countryList.add(countryMMSNumberSplit[0]); } } } return countryList; } /* * creates list with base location of logged in user */ private List createContextCountryList(List userContextCountry) { LOGGER.info("Entered method for creating country from context of Logged in User"); List contextCountryList = new ArrayList<>(); for (NspUserRole nspUserRole : userContextCountry) { String serviceParameter = nspUserRole.getServiceParameters(); String[] serviceParameters = serviceParameter.split("\\]\\,"); for (String parameter : serviceParameters) { String[] param = parameter.split(":"); String firstParam = param[0].replaceAll(CommonConstants.REGXFORSPECIALCHARACTERREMOVAL, ""); if (firstParam.equalsIgnoreCase("country")) { extractCountriesList(contextCountryList, param); } } } LOGGER.info("Leaving method for creating country from context of Logged in User"); return contextCountryList; } private void extractCountriesList(List contextCountryList, String[] param) { String secondParam = param[1].replaceAll("\\[", "").replaceAll("\\]", ""); String[] secondParams = secondParam.split(","); for (String secParam : secondParams) { contextCountryList.add(secParam.replaceAll(CommonConstants.REGXFORSPECIALCHARACTERREMOVAL, "")); } } /* * this methods check for if any mms supplier in secondary supplierNumber column */ private Map checkForSecondaryMMSSupplier(AddUserRoleRequest addUserRoleRequest, boolean checkMMSSupplierNumber) throws SupplierCompanyDataException { LOGGER.info("Entered method for validating if mmsSupplierNumber is present for particular supplier Number"); SupplierCompany intCompany = supplierCompanyDao.fetchSupplierCompany(addUserRoleRequest.getCountry(), addUserRoleRequest.getSalesline(), addUserRoleRequest.getMmsSupplierNumber(), true); Map secondaryCompanyMap; Map resultMap = new HashMap<>(); boolean checkmmsSupplierNumber=checkMMSSupplierNumber; if (null != intCompany.getSecondarySupplierNumber() && !intCompany.getSecondarySupplierNumber().isEmpty()) { secondaryCompanyMap = intCompany.getSecondarySupplierNumber(); checkmmsSupplierNumber = validateMMSSupplierNumber(checkmmsSupplierNumber, secondaryCompanyMap); resultMap.put(intCompany, checkmmsSupplierNumber); } else { resultMap.put(intCompany, checkmmsSupplierNumber); } LOGGER.info("Leaving method for validating if mmsSupplierNumber is present for particular supplier Number"); return resultMap; } private boolean validateMMSSupplierNumber(boolean checkMMSSupplierNumber, Map secondaryCompanyMap) { for (Map.Entry entry : secondaryCompanyMap.entrySet()) { if (entry.getKey().equalsIgnoreCase(CommonConstants.MMSSUPPLIERNUMBER)) { if (null == entry.getValue() || StringUtils.isEmpty(entry.getValue()) || entry.getValue().equalsIgnoreCase("NA")) { checkMMSSupplierNumber = false; } else { checkMMSSupplierNumber = true; break; } } } return checkMMSSupplierNumber; } private boolean supplierAdminCheck(AddUserRoleRequest addUserRoleRequest) throws NspUserDataException { LOGGER.debug("Entered method SupplierAdminCheck in ManageUserServiceImpl"); List adminEmailList = new ArrayList<>(); boolean isAdminCheck; List userList = registrationUtil.getAdminEmailList(addUserRoleRequest.getCountry(), addUserRoleRequest.getSalesline(), addUserRoleRequest.getMmsSupplierNumber()); if (!CollectionUtils.isEmpty(userList)) { adminEmailList.addAll(userList.stream().map(NspUser::getUserId).collect(Collectors.toSet())); } if (!CollectionUtils.isEmpty(adminEmailList)) { isAdminCheck = true; } else { isAdminCheck = false; } LOGGER.info("SupplierAdminCheck in :: ManageUserServiceImpl :: isAdminCheck :: {}", isAdminCheck); LOGGER.debug("Leaving method SupplierAdminCheck in ManageUserServiceImpl"); return isAdminCheck; } private boolean supplierNumberCheck(AddUserRoleRequest addUserRoleRequest) throws NspUserRegistrationDataException, SupplierCompanyDataException, NspUserManagementDataException { LOGGER.debug("Entered method supplierNumberCheck in ManageUserServiceImpl"); boolean contextCheck = false; if (addUserRoleRequest.isWarningCheck()) { contextCheck = true; } else { List userRoleList = nspUserRoleDao.fetchUserRoles(addUserRoleRequest.getEmail(), null); List activeUserRoleList = userRoleList.stream() .filter(user -> null != user.getUserServiceStatus()) .filter(user -> user.getUserServiceStatus().equalsIgnoreCase(SupplierContactConstants.ACTIVE)) .collect(Collectors.toList()); List parentCompanyList = new ArrayList<>(); if (CollectionUtils.isNotEmpty(activeUserRoleList)) { /* * Fix for NL supplier MEC role addition. Since NL_SUPPLIER is not associated * with any suppNo sorting the list so that the null values comes last */ Collections.sort(activeUserRoleList, Comparator.comparing(NspUserRole::getMmsSupplierNumber, Comparator.nullsLast(Comparator.naturalOrder()))); Map> customServiceMap = prepareChildSuppMapForListingSystem(activeUserRoleList); LOGGER.info("custom Service map {}", customServiceMap); Set parentCompanySet = fetchParentCompanySet(customServiceMap); LOGGER.info("parent company set {}", parentCompanySet); if (CollectionUtils.isNotEmpty(parentCompanySet)) { parentCompanyList = parentCompanySet.stream().collect(Collectors.toList()); } } SupplierCompany parentSuppCompanyForRequest = supplierCompanyDao.fetchSupplierCompany( addUserRoleRequest.getCountry(), addUserRoleRequest.getSalesline(), addUserRoleRequest.getMmsSupplierNumber(), true); if (null != parentSuppCompanyForRequest && CollectionUtils.isNotEmpty(parentCompanyList) && parentCompanyList.contains(parentSuppCompanyForRequest.getParentId())) { contextCheck = true; } } LOGGER.debug("Leaving method supplierNumberCheck in ManageUserServiceImpl {}", contextCheck); return contextCheck; } private Set fetchParentCompanySet(Map> customServiceMap) throws SupplierCompanyDataException { LOGGER.debug("Entering method for fetching parent company set"); Set parentCompanySet = new HashSet<>(); if (null != customServiceMap) { for (Entry> customService : customServiceMap.entrySet()) { List supplierCompanyList; String country; String salesLine; String[] parameter = customService.getKey().split("_"); country = parameter[0]; salesLine = parameter[1]; List supplierNumbers = customService.getValue(); supplierCompanyList = supplierCompanyDao.fetchSupplierCompanies(supplierNumbers, country, salesLine); for (SupplierCompany supplierCompany : supplierCompanyList) { parentCompanySet.add(supplierCompany.getParentId()); } } } LOGGER.debug("Leaving method after fetching parent company set"); return parentCompanySet; } /* * this method accept roles of a user and generate custom map where key-> * country_salesline and value-> childsupplier number list */ public Map> prepareChildSuppMapForListingSystem(List userRoleList) { LOGGER.debug("Entering method for preparing custom map"); Map> customServiceMap = new HashMap<>(); for (NspUserRole nspUserRole : userRoleList) { String supplierNumber = nspUserRole.getMmsSupplierNumber(); if (StringUtils.isNotBlank(supplierNumber)) { // NL supplier will not have supplier number -- skip String customKey = nspUserRole.getNspUserRolePrimaryKey().getCountry() + "_" + nspUserRole.getNspUserRolePrimaryKey().getSalesLine(); if (!customServiceMap.containsKey(customKey)) { List childSupplierList = new ArrayList<>(); childSupplierList.add(supplierNumber); customServiceMap.put(customKey, childSupplierList); } else if (customServiceMap.containsKey(customKey)) { List existingchildSupplierList = customServiceMap.get(customKey); addSuppNumberInChildSuppUser(supplierNumber, existingchildSupplierList); customServiceMap.put(customKey, existingchildSupplierList); } } } LOGGER.debug("Leaving method after preparing custom map"); return customServiceMap; } private void addSuppNumberInChildSuppUser(String supplierNumber, List existingchildSupplierList) { if (!existingchildSupplierList.contains(supplierNumber)) { existingchildSupplierList.add(supplierNumber); } } /** * * @param nspRole * @return */ public Set prepareContextForRemoveRole(String nspRole) { Set userRoleSet = new HashSet<>(); UserRole userRole = new UserRole(); userRole.setUserType(UserType.SUPP.getUserType()); userRole.setRoles(new HashSet<>(Arrays.asList(nspRole))); userRoleSet.add(userRole); return userRoleSet; } /** * * @param removeRoleRequest * @param serviceId * @param action * @throws SupplierCompanyDataException * @throws UtilException */ private void saveTransactionDetails(UserServiceTransactionDto removeRoleRequest, String serviceId, String action) throws SupplierCompanyDataException { LOGGER.debug("Entered method saveTransactionDetails in ManageUserServiceUtil"); SupplierUser supplierUser = new SupplierUser(); supplierUser.setCountry(removeRoleRequest.getCountry()); supplierUser.setSalesLine(removeRoleRequest.getSalesline()); supplierUser.setMmsSupplierNumber(removeRoleRequest.getMmsSupplierNumber()); supplierUser.setAppName(removeRoleRequest.getServiceName()); supplierUser.setNspRole(ServiceEnum.valueOf(prepareEnumKey(removeRoleRequest.getServiceName())).role()); supplierUser.setBusinessDepartment(removeRoleRequest.getBusinessDepartments()); UserServiceTransactionsEntity userServiceTransactionsEntity = new UserServiceTransactionsEntity(); UserServiceTransactionsPrimaryKey userServiceTransactionsPrimaryKey = new UserServiceTransactionsPrimaryKey(); userServiceTransactionsPrimaryKey.setCountry(removeRoleRequest.getCountry()); userServiceTransactionsPrimaryKey.setSalesline(removeRoleRequest.getSalesline()); userServiceTransactionsPrimaryKey.setTransactionId(UUID.randomUUID()); userServiceTransactionsEntity.setUserServiceTransactionKey(userServiceTransactionsPrimaryKey); userServiceTransactionsEntity.setComments(removeRoleRequest.getComments()); userServiceTransactionsEntity.setLastUpdatedBy(getCreateOrUpdatedBy()); userServiceTransactionsEntity.setLastUpdatedTimestamp(new Date()); userServiceTransactionsEntity.setAction(action); userServiceTransactionsEntity.setCreatedBy(getCreateOrUpdatedBy()); userServiceTransactionsEntity.setCreatedTimestamp(new Date()); userServiceTransactionsEntity.setServiceRequestId(serviceId); userServiceTransactionsEntity.setServiceName(removeRoleRequest.getServiceName()); userServiceTransactionsEntity.setServiceParameter( jsonUtil.writeJsonString(this.getContextMapping(supplierUser, new ContextMapping()))); userServiceTransactionsEntity.setStatus("SUCCESS"); userServiceTransactionsEntity.setUserId(removeRoleRequest.getEmail()); userServiceTransactionsDao.createUserServiceTransactions(userServiceTransactionsEntity); LOGGER.debug("Leaving method saveTransactionDetails in ManageUserServiceUtil"); } /** * Get userId or emailId from user context If context is null, then set as * SYSTEM (Batch Update) * * @return */ public String getCreateOrUpdatedBy() { String createdOrUpdateBy = ""; try { createdOrUpdateBy = StringUtils.isNotBlank(NspUserContext.getUpn()) ? NspUserContext.getUpn() : NspUserContext.getEmail(); } catch (Exception e) { createdOrUpdateBy = SupplierOnboardingConstants.SYSTEM; LOGGER.error("Exception in getting ceated and updated by {} and exception {}", createdOrUpdateBy, e); } return createdOrUpdateBy; } /** * * @param userServiceDTO * @param serviceId * @param action * @param serviceParameter * @param status * @throws SupplierCompanyDataException */ private void saveTransactionDetails(UserServiceTransactionDto userServiceDTO, String serviceId, String action, String serviceParameter, String status) throws SupplierCompanyDataException { LOGGER.debug("Entered method saveTransactionDetails WithoutContext Preparation in ManageUserServiceUtil"); UserServiceTransactionsEntity userServiceTransactionsEntity = new UserServiceTransactionsEntity(); UserServiceTransactionsPrimaryKey userServiceTransactionsPrimaryKey = new UserServiceTransactionsPrimaryKey(); userServiceTransactionsPrimaryKey.setCountry(userServiceDTO.getCountry()); userServiceTransactionsPrimaryKey.setSalesline(userServiceDTO.getSalesline()); userServiceTransactionsPrimaryKey.setTransactionId(UUID.randomUUID()); userServiceTransactionsEntity.setUserServiceTransactionKey(userServiceTransactionsPrimaryKey); userServiceTransactionsEntity.setComments(userServiceDTO.getComments()); userServiceTransactionsEntity.setLastUpdatedBy( StringUtils.isNotBlank(NspUserContext.getUpn()) ? NspUserContext.getUpn() : NspUserContext.getEmail()); userServiceTransactionsEntity.setLastUpdatedTimestamp(new Date()); userServiceTransactionsEntity.setAction(action); userServiceTransactionsEntity.setCreatedBy( StringUtils.isNotBlank(NspUserContext.getUpn()) ? NspUserContext.getUpn() : NspUserContext.getEmail()); userServiceTransactionsEntity.setCreatedTimestamp(new Date()); userServiceTransactionsEntity.setServiceRequestId(serviceId); userServiceTransactionsEntity.setServiceName(userServiceDTO.getServiceName()); userServiceTransactionsEntity.setServiceParameter(serviceParameter); userServiceTransactionsEntity.setStatus(status); userServiceTransactionsEntity.setUserId(userServiceDTO.getEmail()); userServiceTransactionsDao.createUserServiceTransactions(userServiceTransactionsEntity); LOGGER.debug("Leaving method saveTransactionDetails WithoutContext Preparation in ManageUserServiceUtil"); } /** * This method is used to order the apps in the list based on the specified * order * * @param servicesList * @return */ public List orderList(Collection servicesList) { Map orderMap = new TreeMap<>(); for (String service : servicesList) { int index = ServiceAppsEnum.valueOf(prepareEnumKey(service).toUpperCase()).getAppValue(); orderMap.put(index, service); } return new ArrayList<>(orderMap.values()); } /** * Assign the service to an user. * * @param request * @return */ public Response processUserRole(UserRoleRequest request) { LOGGER.debug("ManageUserServiceUtil : processUserRole : Start"); Response response = new Response(); try { /** Get User role details for an user by email */ List userRoleListForEmailId = nspUserRoleDao.fetchUserRoles(request.getUserId(), null); /** Filter the User role details by service ID */ List userRolesBasedOnServiceId = userRoleListForEmailId.stream() .filter(role -> request.getServiceId().equalsIgnoreCase(role.getServiceRequestId())) .collect(Collectors.toList()); /** Get the first NspUserRole entity */ NspUserRole anyUserRoleEntity = userRolesBasedOnServiceId.stream().iterator().next(); /** Perform the specific action based on user service status */ if (!userRolesBasedOnServiceId.isEmpty()) { if (anyUserRoleEntity.getUserServiceStatus() .equalsIgnoreCase(UserManagementServiceConstants.USER_STATUS_ADDITION_IN_PROGRESS)) { response = this.addMecSupplierRoleForUser(request, userRolesBasedOnServiceId); } else { List mecUserRoles = userRoleListForEmailId.stream() .filter(obj -> obj.getServiceName().equalsIgnoreCase(CommonConstants.MEC)) .collect(Collectors.toList()); response = this.removeMecSupplierRoleForUser(request, userRolesBasedOnServiceId, anyUserRoleEntity, mecUserRoles); } } else { /** Set bad request, the role is not present for the service ID */ response = (Response) responseUtil.getBadRequestResponse(response); } } catch (Exception e) { LOGGER.error("ManageUserServiceUtil : processUserRole : Exception : {}", e); /** Set error response */ response = (Response) responseUtil.getInternalServerErrorResponse(response); } LOGGER.debug("ManageUserServiceUtil : processUserRole : End"); return response; } /** * @param request * @param userRoles * @param userRole * @param userRoleList * @return * @throws UserAuthException * @throws IOException * @throws SupplierCompanyDataException * @throws UserManagementDataException * @throws NspUserManagementServiceException * @throws NspUserManagementDataException * @throws SupplierContactsDataException */ private Response removeMecSupplierRoleForUser(UserRoleRequest request, List userRolesBasedOnServiceId, NspUserRole anyUserRoleEntity, List userRoleListForEmailId) throws UserAuthException, SupplierCompanyDataException, IOException, UserManagementDataException, NspUserManagementServiceException, NspUserManagementDataException, SupplierContactsDataException { Response response; /** * Get the status message based on status code of jira ticket for Remove mec * role request */ String status = this.getStatusbasedOnRequest(request); request.setStatus(status); /** */ if (status.equalsIgnoreCase(UserManagementServiceConstants.STATUS_UNASSIGNED)) { LOGGER.debug("Proceeding to remove mec role with status {}", status); response = this.removeMecRoleFromContext(request, userRolesBasedOnServiceId, anyUserRoleEntity, userRoleListForEmailId); } else { LOGGER.debug("updating solr with status message{}", request.getStatusMessage()); response = this.updateUserRoleStatus(request, userRolesBasedOnServiceId); } LOGGER.info("removeMecSupplierRoleForUser response {}", response); return response; } /** * @param request * @param userRolesBasedOnServiceId * @param anyUserRoleEntity * @param userRoleListForEmailId * @param response * @throws NspUserManagementServiceException * @throws UserAuthException * @throws IOException * @throws SupplierCompanyDataException * @throws NspUserManagementDataException * @throws SupplierContactsDataException * @throws UserManagementDataException */ private Response removeMecRoleFromContext(UserRoleRequest request, List userRolesBasedOnServiceId, NspUserRole anyUserRoleEntity, List userRoleListForEmailId) throws NspUserManagementServiceException, SupplierCompanyDataException, UserAuthException, IOException, NspUserManagementDataException, SupplierContactsDataException, UserManagementDataException { LOGGER.debug("ManageUserServiceUtil : assignUserRole : Start"); Response response = new Response(); /** Get User role context for the NspUserRole records */ UserRole userRole = this.getUserRoleContext(userRolesBasedOnServiceId); /** Form the set of UserRole */ Set userRoleSet = new HashSet<>(); userRoleSet.add(userRole); /** Form the Remove user role request */ RemoveUserRoleRequest removeRoleRequestForIdam = this.formRemoveRoleRequest(anyUserRoleEntity); UserServiceTransactionDto userServiceTransactionDto = new UserServiceTransactionDto(); userServiceTransactionDto = (UserServiceTransactionDto) beanUtil.copyObjectProperties(userServiceTransactionDto, removeRoleRequestForIdam); Set roleSetForRemoveSupplier = this .prepareContextForRemoveRole(ServiceEnum.valueOf(CommonConstants.MEC).role()); userRoleListForEmailId.removeAll(userRolesBasedOnServiceId); /** remove role with contexts from IDAM */ boolean removeResponse = this.processUserInIDAM(userServiceTransactionDto, userRoleListForEmailId, roleSetForRemoveSupplier); if (removeResponse) { /** iterate the user roles if idam response is success */ for (NspUserRole nspUserRole : userRolesBasedOnServiceId) { boolean isDeletedInSolr = false; boolean isDeleted; boolean isContactdeleted; /** deleting the user role records */ isDeleted = nspUserRoleDao.deleteUserRole(nspUserRole); /** deleting the user role service records from solr */ if (isDeleted) { isDeletedInSolr = this.deleteUserRoleInSolr(nspUserRole, request.getUserId()); } LOGGER.info("isDeletedInSolr in userRole solr:: {}", isDeletedInSolr); /** deleting the supplier contact records from db and solr */ if (isDeletedInSolr) { /* Successfully deleted user role details in userRoleService solr schema */ RemoveUserRoleRequest removeRoleRequest = this.formRemoveRoleRequest(nspUserRole); isContactdeleted = removeSupplierFromContacts(removeRoleRequest); LOGGER.info("isContactUpdated ::: {}", isContactdeleted); } } /** update the status of jira ticket in user service transaction */ this.updateUserServiceTransaction(userRolesBasedOnServiceId.get(0).getServiceRequestId(), request); response = (Response) responseUtil.getSuccessResponse(response); } else { LOGGER.error("ManageUserServiceUtil : processUserRole : IDAM not processed request"); /** Set error, the role is not added into IDAM */ response = (Response) responseUtil.getInternalServerErrorResponse(response); } return response; } /** * @param nspUserRole * @return */ private RemoveUserRoleRequest formRemoveRoleRequest(NspUserRole nspUserRole) { RemoveUserRoleRequest removeUserRoleRequest = new RemoveUserRoleRequest(); removeUserRoleRequest.setCountry(nspUserRole.getNspUserRolePrimaryKey().getCountry()); removeUserRoleRequest.setSalesline(nspUserRole.getNspUserRolePrimaryKey().getSalesLine()); removeUserRoleRequest.setEmail(nspUserRole.getUserId()); removeUserRoleRequest.setMmsSupplierNumber(nspUserRole.getMmsSupplierNumber()); removeUserRoleRequest.setServiceName(nspUserRole.getServiceName()); return removeUserRoleRequest; } private Response addMecSupplierRoleForUser(UserRoleRequest request, List userRoles) throws UserAuthException, NspUserDataException, NspUserManagementDataException, SupplierCompanyDataException, UserManagementDataException, SupplierContactsDataException { Response response; /** Set the status based on status code */ request.setStatus(getJiraStatus(request.getStatusCode())); if (request.getStatus().equalsIgnoreCase(UserManagementServiceConstants.STATUS_AVAILABLE)) { /** Assign role to the user */ response = assignUserRole(request, userRoles); } else { /** Update the status of the user role */ response = updateUserRoleStatus(request, userRoles); } return response; } /** * Update the User Role status. * * @param request * @param userRoles * @return * @throws NspUserManagementDataException * @throws UserManagementDataException */ private Response updateUserRoleStatus(UserRoleRequest request, List userRoles) throws NspUserManagementDataException, UserManagementDataException { LOGGER.debug("ManageUserServiceUtil : updateUserRoleStatus : Start"); Response response = new Response(); for (NspUserRole role : userRoles) { /** Update the user role details */ this.updateUserRoleDetails(role, request); } /** Update the user service transaction */ this.updateUserServiceTransaction(userRoles.get(0).getServiceRequestId(), request); /** Set success, the role is assigned to user */ response = (Response) responseUtil.getSuccessResponse(response); LOGGER.debug("ManageUserServiceUtil : updateUserRoleStatus : End"); return response; } /** * Assign the role to user. * * @param request * @param userRoles * @return * @throws UserAuthException * @throws NspUserDataException * @throws NspUserManagementDataException * @throws UserManagementDataException * @throws SupplierCompanyDataException * @throws SupplierContactsDataException */ private Response assignUserRole(UserRoleRequest request, List userRoles) throws UserAuthException, NspUserDataException, NspUserManagementDataException, SupplierCompanyDataException, UserManagementDataException, SupplierContactsDataException { LOGGER.debug("ManageUserServiceUtil : assignUserRole : Start"); Response response = new Response(); /** Get User role context and add to IDAM for a user */ UserRole userRole = this.getUserRoleContext(userRoles); Set userRoleSet = new HashSet<>(); userRoleSet.add(userRole); /** Add role with contexts into IDAM */ AssignRoleResponse userRoleResponse = userAuthServiceWrapper.assignRole(request.getUserId(), userRoleSet); if (null != userRoleResponse && null != userRoleResponse.getResults() && userRoleResponse.getResults().get(0).getStatus() == 201) { /** Get User details for an user by email */ NspUser user = nspUserDao.fetchNspUser(request.getUserId()); for (NspUserRole role : userRoles) { /** Update the user role details */ this.updateUserRoleDetails(role, request); LOGGER.info("ManageUserServiceUtil : assignUserRole : Updated the role"); /** Update the configurations of a supplier company */ this.updateSupplierCompanyConfig(role); LOGGER.info("ManageUserServiceUtil : assignUserRole : Updated the supplier company"); /** Create or update the user contacts */ this.createContactForNewSupplier(user, role, userRole.getContextMappings()); LOGGER.info("ManageUserServiceUtil : assignUserRole : Updated the contacts"); } /** Update the user service transaction */ this.updateUserServiceTransaction(userRoles.get(0).getServiceRequestId(), request); /** Set success, the role is assigned to user */ response = (Response) responseUtil.getSuccessResponse(response); } else { LOGGER.error("ManageUserServiceUtil : processUserRole : IDAM not processed request"); /** Set error, the role is not added into IDAM */ response = (Response) responseUtil.getInternalServerErrorResponse(response); } LOGGER.debug("ManageUserServiceUtil : assignUserRole : End"); return response; } /** * Get the User role context to add in IDAM * * @param userRoles * @return */ private UserRole getUserRoleContext(List userRoles) { LOGGER.debug("ManageUserServiceUtil : getUserRoleContext : Start"); UserRole userRole = new UserRole(); userRole.setUserType(UserType.SUPP.getUserType()); List contextMappingList = new ArrayList<>(); /** Set all the role context */ userRoles.forEach(role -> { ContextMapping contextMapping = jsonUtil.readJsonString(role.getServiceParameters(), ContextMapping.class); contextMappingList.add(contextMapping); userRole.setRoleId(role.getNspUserRolePrimaryKey().getNspRole()); }); userRole.setContextMappings(contextMappingList); LOGGER.debug("ManageUserServiceUtil : getUserRoleContext : End"); return userRole; } /** * Update the configurations of a supplier company * * @param role * @throws UserManagementDataException */ private void updateSupplierCompanyConfig(NspUserRole role) throws SupplierCompanyDataException, UserManagementDataException { LOGGER.debug("ManageUserServiceUtil : updateSupplierCompanyConfig : Start"); List company = new ArrayList<>(); company.add(role.getMmsSupplierNumber()); List companies = supplierCompanyDao.fetchSupplierCompaniesForSupplierNo(company, role.getNspUserRolePrimaryKey().getCountry(), role.getNspUserRolePrimaryKey().getSalesLine()); if (!companies.isEmpty() && (null == companies.get(0).getIsConfigurationValid() || !companies.get(0).getIsConfigurationValid())) { supplierCompanyDao.updateConfigurationSupplierCompany(role.getNspUserRolePrimaryKey().getCountry(), role.getNspUserRolePrimaryKey().getSalesLine(), company, null, true); /** Save company transaction and solr */ this.updateCompanyTransaction(role.getNspUserRolePrimaryKey().getCountry(), role.getNspUserRolePrimaryKey().getSalesLine(), companies, true); } LOGGER.debug("ManageUserServiceUtil : updateSupplierCompanyConfig : End"); } /** * Update the user role details * * @param role * @throws UserManagementDataException * @throws NspUserManagementDataException */ private void updateUserRoleDetails(NspUserRole role, UserRoleRequest request) throws NspUserManagementDataException { LOGGER.debug("ManageUserServiceUtil : updateUserRoleDetails : Start"); /** Update the role service status */ if (!role.getUserServiceStatus().equalsIgnoreCase(request.getStatus())) { role.setUserServiceStatus(request.getStatus()); role.setLastUpdatedBy(SupplierContactConstants.SYSTEM); role.setLastUpdatedDate(new Date()); nspUserRoleDao.updateUserRole(role); } /** Update the status in solr */ this.updateSolrUserRole(role, request); LOGGER.info("ManageUserServiceUtil : updateUserRoleDetails : Updated the Solr role record"); LOGGER.debug("ManageUserServiceUtil : updateUserRoleDetails : End"); } /** * Update the user service transaction. * * @param role * @param request * @throws UserManagementDataException */ public void updateUserServiceTransaction(String serviceId, UserRoleRequest request) throws UserManagementDataException { LOGGER.debug("ManageUserServiceUtil : updateUserServiceTransaction : Start"); /** Get user service transaction from service id */ UserServiceTransactionsEntity transaction = userServiceTransactionsDao.getTransaction(serviceId); /** Update the user service transaction details */ transaction.setStatus(request.getStatus()); transaction.setReferenceStatusCode(request.getStatusCode()); transaction.setReferenceServiceMessage(request.getStatusMessage()); transaction.setLastUpdatedTimestamp(new Date()); transaction.setLastUpdatedBy(SupplierContactConstants.SYSTEM); userServiceTransactionsDao.updateTransaction(transaction); LOGGER.debug("ManageUserServiceUtil : updateUserServiceTransaction : End"); } /** * Update the user role details in solr. * * @param role * @param request */ @SuppressWarnings("unchecked") private void updateSolrUserRole(NspUserRole role, UserRoleRequest request) { LOGGER.debug("ManageUserServiceUtil : updateSolrUserRole : Start"); SolrInputDocument userRole = new SolrInputDocument(); /** Get listing system name */ String listingSystemName = listingSystemInfoUtil.getListingSystem(role.getNspUserRolePrimaryKey().getCountry(), role.getNspUserRolePrimaryKey().getSalesLine()); /** Generate the key for the solr entity */ StringJoiner key = new StringJoiner("_"); key.add(role.getUserId()); key.add(listingSystemName); key.add(role.getNspUserRolePrimaryKey().getNspRole()); key.add(role.getMmsSupplierNumber()); /** Set the key for which the update need to do */ userRole.addField(UserManagementServiceConstants.USERROLE_SERVICELISTING_ID, key.toString()); /** Set all the values to update in solr record */ solrQueryUtil.setFieldValueToUpdate(userRole, UserManagementServiceConstants.USER_ROLE_STATUS, request.getStatus()); solrQueryUtil.setFieldValueToUpdate(userRole, UserManagementServiceConstants.REFERENCE_STATUS_CODE, request.getStatusCode()); solrQueryUtil.setFieldValueToUpdate(userRole, UserManagementServiceConstants.REFERENCE_STATUS_MESSAGE, request.getStatusMessage()); solrQueryUtil.setFieldValueToUpdate(userRole, RegistrationConstants.COLUMN_LAST_UPDATED_DATE_SOLR, new Date()); /** Update the user role record in solr */ try { nspSolrClient.updateDataInSolr(userRole, userRoleServiceCollectionName.trim()); } catch (SolrException e) { LOGGER.error("Exception occured while trying to update user role details in userRoleService Solr {}", e); boolean isFailedRecordInserted = userManagementSolrDaoImpl.saveSolrFailedRecordToDBForUpdateUserRole(e, role.getNspUserRolePrimaryKey().getCountry(), role.getNspUserRolePrimaryKey().getSalesLine(), userRole); LOGGER.info("user role solr failed record inserted in db {}", isFailedRecordInserted); } LOGGER.debug("ManageUserServiceUtil : updateSolrUserRole : End"); } /** * Get Jira status based on the response code -- MEC ADD SUPPLIER */ private String getJiraStatus(String responseCode) { String status; if (responseCode.equals(String.valueOf(HttpStatusCode.STATUS_CODE_201))) { status = UserManagementServiceConstants.STATUS_AVAILABLE; } else if (responseCode.equals(String.valueOf(HttpStatusCode.SUCCESS_CODE))) { status = UserManagementServiceConstants.USER_STATUS_ADDITION_IN_PROGRESS; } else { status = UserManagementServiceConstants.STATUS_UNASSIGNED; } return status; } /** * Get Jira status based on the response code -- MEC REMOVE SUPPLIER */ private String getStatusbasedOnRequest(UserRoleRequest request) { String status; /** Set the status based on status code */ if (request.getStatusCode().equalsIgnoreCase(String.valueOf(HttpStatusCode.STATUS_CODE_201))) { status = UserManagementServiceConstants.STATUS_UNASSIGNED; } else if (request.getStatusCode().equals(String.valueOf(HttpStatusCode.SUCCESS_CODE))) { status = UserManagementServiceConstants.USER_STATUS_REMOVAL_IN_PROGRESS; } else { status = UserManagementServiceConstants.STATUS_AVAILABLE; } LOGGER.debug("fetch status message based on getStatusApi of mec {}", status); return status; } public String getLoggedInUserEmailId() throws NspUserDataException { LOGGER.debug("Entering method getLoggedInUserEmailId in ManageUserServiceUtil"); String loggedInUserEmailId; if (NspUserContext.getUserType().equalsIgnoreCase(UserType.EMP.getUserType())) { NspUser nspUser; nspUser = nspUserDao.fetchNspUser(NspUserContext.getUpn()); loggedInUserEmailId = nspUser.getEmailAddress(); } else { loggedInUserEmailId = NspUserContext.getEmail(); } LOGGER.debug("Leaving method getLoggedInUserEmailId in ManageUserServiceUtil"); return loggedInUserEmailId; } /** * Save company transaction and solr. * * @param country * @param salesline * @param supplierNumber * @param isConfigAvailable * @param serviceRequestId */ public void updateCompanyTransaction(String country, String salesline, List companies, boolean isConfigAvailable) { SolrInputDocument companySolr = null; /** Get the Supplier Companies */ try { for (SupplierCompany company : companies) { /** Update the company details in solr */ companySolr = new SolrInputDocument(); companySolr.addField(UserManagementServiceConstants.COMPANYID, company.getSupplierCompanyId().toString()); solrQueryUtil.setFieldValueToUpdate(companySolr, SupplierContactConstants.UPDATEDDATE, new Date()); solrQueryUtil.setFieldValueToUpdate(companySolr, "glnConfigAvailable", isConfigAvailable); nspSolrClient.updateDataInSolr(companySolr, supplierCompanyCollectionName.trim()); } /** Save the company transaction */ this.createSupplierCompanyTransactionEntity(companies.get(0)); } catch (SupplierCompanyTransactionException | UserManagementDataException e) { LOGGER.error("ManageUserServiceUtil : updateCompanyTransaction : Exception : {}", e); } catch (SolrException e) { LOGGER.error("Exception occured while trying to update company details in supplier company Solr {}", e); boolean isFailedRecordInserted = saveSolrFailedRecordToDBForUpdateCompany(e, country, salesline, companySolr); LOGGER.info("supplier company solr failed record inserted in db {}", isFailedRecordInserted); } } private boolean saveSolrFailedRecordToDBForUpdateCompany(SolrException exception, String country, String salesline, SolrInputDocument solrDocToUpdate) { LOGGER.debug("saveSolrFailedRecordToDBForUpdateCompany in ManageUserServiceUtil starts"); boolean isFailedRecordsInsertedInDB = false; List> list = new ArrayList<>(); SolrFailedRecords solrErrorRecords = (SolrFailedRecords) exception.getFailedObject(); userManagementSolrDaoImpl.prepareSolrFailedRecordsForUpdate(country, salesline, solrDocToUpdate, list, solrErrorRecords); solrErrorRecords.setModule(supplierCompanyCollectionName.trim()); SolrCompanyUpdateFailedRecordRequest failedUpdateObj = new SolrCompanyUpdateFailedRecordRequest(); failedUpdateObj .setCompanyId(solrDocToUpdate.getFieldValue(UserManagementServiceConstants.COMPANYID).toString()); failedUpdateObj.setSetValues(list); String solrFailureRecordString = ""; try { solrFailureRecordString = jsonUtil.writeJsonString(failedUpdateObj); } catch (UtilException ex) { LOGGER.error("error in saveSolrFailedRecordToDBForUpdateCompany in ManageUserServiceUtil {}", ex); } solrErrorRecords.setSolrRecord(solrFailureRecordString); solrErrorRecords = solrFailureDao.saveErrorRecord(solrErrorRecords); if (solrErrorRecords != null && solrErrorRecords.getErrorId() != null) { isFailedRecordsInsertedInDB = true; } LOGGER.debug("saveSolrFailedRecordToDBForUpdateCompany in ManageUserServiceUtil ends"); return isFailedRecordsInsertedInDB; } /** * @param serviceRequestId * @param mecWebServiceResponse * @param updateGlnConfigurationRequest * @return * @throws SupplierCompanyTransactionException * @throws UserManagementDataException */ private void createSupplierCompanyTransactionEntity(SupplierCompany company) throws SupplierCompanyTransactionException, UserManagementDataException { LOGGER.debug("Forming SupplierCompanyTransactionEntity and saving to database"); SupplierCompanyTransactionEntity supplierCompanyTransactionEntity = new SupplierCompanyTransactionEntity(); SupplierCompanyTransactionPrimaryKey supplierCompanyTransactionPrimaryKey = new SupplierCompanyTransactionPrimaryKey(); supplierCompanyTransactionPrimaryKey.setCountry(company.getSupplierCompanyPrimaryKey().getCountry()); supplierCompanyTransactionPrimaryKey.setSalesline(company.getSupplierCompanyPrimaryKey().getSalesline()); supplierCompanyTransactionPrimaryKey.setTransactionId(UUID.randomUUID()); supplierCompanyTransactionEntity.setSupplierCompanyTransactionPrimaryKey(supplierCompanyTransactionPrimaryKey); supplierCompanyTransactionEntity.setCreatedBy(NspUserContext.getUpn()); supplierCompanyTransactionEntity.setCreatedTimestamp(new Date()); supplierCompanyTransactionEntity.setGln(company.getGln()); supplierCompanyTransactionEntity.setConfiguration(company.getConfiguration()); supplierCompanyTransactionEntity.setStatus(UserManagementServiceConstants.STATUS_AVAILABLE); supplierCompanyTransactionDao.saveEntityToTransaction(supplierCompanyTransactionEntity); } /* * method check the departments configured for listing system with requested * departments. * * @param country * * @param salesline * * @param businessDepartments * * @throws NspUserRegistrationDataException */ public boolean checkDepartmentsForListingSystem(String country, String salesline, List businessDepartments) throws NspUserRegistrationDataException { LOGGER.debug("Entering method checkDepartmentsForListingSystem in ManageUserServiceUtil"); boolean departmentCheck = false; List departmentsData = registrationUtil.getListOfDepartmentsBasedOnuserType(country, salesline); if (!departmentsData.isEmpty()) { departmentCheck = departmentsData.containsAll(businessDepartments); } LOGGER.debug( "Leaving method checkDepartmentsForListingSystem in ManageUserServiceUtil with department check {}", departmentCheck); return departmentCheck; } /** * @param request * @return * @throws NspUserManagementServiceException */ public Response processUpdateGln(UserRoleRequest request) throws NspUserManagementServiceException { Response response = new Response(); LOGGER.debug("processUpdateGln method starts"); try { /** Get the status message based on jira status */ String status = this.getStatusForUpdateGlnJiraTicket(request); LOGGER.debug("status of jira ticket with code {},{}", status, request.getStatusCode()); /** proceed based on status */ if (status.equalsIgnoreCase(UserManagementServiceConstants.STATUS_AVAILABLE)) { /** * update the database(supplier company,supplier_cmpany_transaction and solr if * status is available */ response = this.updateSupplierCompanyAndTransactionEntiy(request, status); } else if (status.equalsIgnoreCase(UserManagementServiceConstants.STATUS_UNASSIGNED)) { /** update the jira status if ticket is rejected */ this.updateSupplierCompanyTransaction(request, status); response = (Response) responseUtil.getSuccessResponse(response); } } catch (SupplierCompanyTransactionException | SupplierCompanyDataException e) { LOGGER.debug("Exception occured in processUpdateGln method for request id {} {}", e, request.getServiceId()); throw new NspUserManagementServiceException(e); } return response; } /** * @param request * @param status * @param supplierCompanyTransactionEntity * @return * @throws SupplierCompanyTransactionException * @throws SupplierCompanyDataException */ private Response updateSupplierCompanyAndTransactionEntiy(UserRoleRequest request, String status) throws SupplierCompanyTransactionException, SupplierCompanyDataException { Response response = new Response(); List mmsSuppNo = new ArrayList<>(); boolean isDbUpdated; /** Updating the transaction entity status , reference id fields */ SupplierCompanyTransactionEntity supplierCompanyTransactionEntity = this .updateSupplierCompanyTransaction(request, status); LOGGER.debug("updating supplier company for the gln"); /** fetching supplier company records for the given gln */ List supplierCompany = supplierCompanyDao.fetchSupplierCompaniesForGln( supplierCompanyTransactionEntity.getSupplierCompanyTransactionPrimaryKey().getCountry(), supplierCompanyTransactionEntity.getSupplierCompanyTransactionPrimaryKey().getSalesline(), supplierCompanyTransactionEntity.getGln()); for (SupplierCompany suppCompany : supplierCompany) { mmsSuppNo.add(suppCompany.getSupplierCompanyPrimaryKey().getMmsSupplierNumber()); } /** updating the supplier company configuration field */ isDbUpdated = supplierCompanyDao.updateConfigurationSupplierCompany( supplierCompany.get(0).getSupplierCompanyPrimaryKey().getCountry(), supplierCompany.get(0).getSupplierCompanyPrimaryKey().getSalesline(), mmsSuppNo, supplierCompanyTransactionEntity.getConfiguration(), true); /** updating the status in solr if db insertion is success */ if (isDbUpdated) { LOGGER.debug("updating solr -- supplier company collection"); for (SupplierCompany suppCompany : supplierCompany) { SolrInputDocument supplierCompanySolr = new SolrInputDocument(); supplierCompanySolr.addField(UserManagementServiceConstants.COMPANYID, suppCompany.getSupplierCompanyId().toString()); solrQueryUtil.setFieldValueToUpdate(supplierCompanySolr, CompanyManagementConstants.STATUS, request.getStatus()); try { nspSolrClient.updateDataInSolr(supplierCompanySolr, supplierCompanyCollectionName.trim()); } catch (SolrException e) { LOGGER.error( "Exception occured while trying to update company details in updateSupplierCompanyAndTransactionEntiy for supplier company Solr {}", e); boolean isFailedRecordInserted = saveSolrFailedRecordToDBForUpdateCompany(e, suppCompany.getSupplierCompanyPrimaryKey().getCountry(), suppCompany.getSupplierCompanyPrimaryKey().getSalesline(), supplierCompanySolr); LOGGER.info(" supplier company solr failed record inserted in db {}", isFailedRecordInserted); } } response = (Response) responseUtil.getSuccessResponse(response); } else { response = (Response) responseUtil.getInternalServerErrorResponse(response); } return response; } public SupplierCompanyTransactionEntity updateSupplierCompanyTransaction(UserRoleRequest request, String status) throws SupplierCompanyTransactionException { SupplierCompanyTransactionEntity supplierCompanyTransactionEntity = supplierCompanyTransactionDao .getTransactionsBasedOnServiceRequestId(request.getServiceId()); boolean isDbUpdated = supplierCompanyTransactionDao.updateSupplierCompanyTransactionrecord(status, supplierCompanyTransactionEntity.getSupplierCompanyTransactionPrimaryKey().getCountry(), supplierCompanyTransactionEntity.getSupplierCompanyTransactionPrimaryKey().getSalesline(), supplierCompanyTransactionEntity.getSupplierCompanyTransactionPrimaryKey().getTransactionId(), request); LOGGER.debug("updateSupplierCompanyTransaction method dbUpdateStatus {}", isDbUpdated); return supplierCompanyTransactionEntity; } /** * @param request * @return * */ private String getStatusForUpdateGlnJiraTicket(UserRoleRequest request) { String status; LOGGER.debug("getStatusForUpdateGlnJiraTicket method starts"); if (request.getStatusCode().equalsIgnoreCase(String.valueOf(HttpStatusCode.STATUS_CODE_201))) { status = UserManagementServiceConstants.STATUS_AVAILABLE; } else if (request.getStatusCode().equals(String.valueOf(HttpStatusCode.SUCCESS_CODE))) { status = UserManagementServiceConstants.UPDATE_IN_PROGRESS; } else { status = UserManagementServiceConstants.STATUS_UNASSIGNED; } return status; } public Response removeAdminRoleAndUpdateSBDDetails(RemoveUserRoleRequest removeRoleRequest, List userRoleList, List companiesByParentId) throws UserManagementServiceException { LOGGER.info("Entered method removeAdminRoleAndUpdateSBDDetails in ManageUserServiceUtil"); Response response = new Response(); try { ArrayList mmsSupplierNumbers = new ArrayList<>(); companiesByParentId.stream() .forEach(obj -> mmsSupplierNumbers.add(obj.getSupplierCompanyPrimaryKey().getMmsSupplierNumber())); List supplierAdminList = getSupplierAdminList(userRoleList, removeRoleRequest); List supplierAdminDeleteList = getSupplierAdminListForCountrySalesline(removeRoleRequest, userRoleList, mmsSupplierNumbers); companiesByParentId.stream() .forEach(obj -> mmsSupplierNumbers.add(obj.getSupplierCompanyPrimaryKey().getMmsSupplierNumber())); List updatedUserRoleList = supplierAdminList.stream() .filter(role -> !mmsSupplierNumbers.contains(role.getMmsSupplierNumber())) .collect(Collectors.toList()); List supplierAdminUpdateList = supplierAdminList; supplierAdminUpdateList.removeAll(supplierAdminDeleteList); /** Fetching only SBD roles from his set of roles */ List supplierCountryDeptList = getSBDRoleList(userRoleList); /** Getting the list old deleted supplier companies */ List supplierCountryDeptDeleteList = getSBDRoleListForAdminDepartment(removeRoleRequest, userRoleList, mmsSupplierNumbers); List supplierCountryDeptCountrySpecificList = getSBDRoleListForRestCountries(removeRoleRequest, userRoleList); List supplierCountryDeptUpdatedList = supplierCountryDeptList; supplierCountryDeptUpdatedList.removeAll(supplierCountryDeptCountrySpecificList); /** * Filtering based on supplier numbers and sending the * filteredSameSuppNumberSBDList to updateAdminDepartmentForSBDRole to check and * remove admin department from department list which has multiple departments */ List filteredSameSuppNumberSBDList = supplierCountryDeptUpdatedList.stream() .filter(role -> mmsSupplierNumbers.contains(role.getMmsSupplierNumber())) .collect(Collectors.toList()); /** This is written to not to touch for other parent id for same country */ supplierCountryDeptUpdatedList.removeIf(role -> mmsSupplierNumbers.contains(role.getMmsSupplierNumber())); List updatedCountryDeptSBDList = new ArrayList<>(); /* change in NSP-8585 if user have only Admin businessDepartment */ updatedCountryDeptSBDList = updateAdminDepartmentForSBDRole(filteredSameSuppNumberSBDList, updatedCountryDeptSBDList, supplierAdminDeleteList); LOGGER.info("In ManageUserServiceUtil preparing final list to update SBD list of user"); List finalUpdateSBDList = new ArrayList<>(); finalUpdateSBDList.addAll(supplierCountryDeptUpdatedList); finalUpdateSBDList.addAll(updatedCountryDeptSBDList); finalUpdateSBDList.addAll(supplierCountryDeptCountrySpecificList); List documentAlertUpdateSBDList = new ArrayList<>(); documentAlertUpdateSBDList.addAll(supplierCountryDeptDeleteList); boolean isIDAMSuccess = false; // IDAM Set roleSetForRemoveSupplier = null; if (!CollectionUtils.isEmpty(supplierAdminDeleteList)) { LOGGER.info( "ManagrUserServiceUtil : removeAdminRoleAndUpdateDetails : Size of Admin list of user :: {}", supplierAdminDeleteList.size()); roleSetForRemoveSupplier = prepareContextForRemoveRole( supplierAdminDeleteList.get(0).getNspUserRolePrimaryKey().getNspRole()); UserServiceTransactionDto userServiceTransactionDto = new UserServiceTransactionDto(); userServiceTransactionDto = (UserServiceTransactionDto) beanUtil .copyObjectProperties(userServiceTransactionDto, removeRoleRequest); isIDAMSuccess = processUserInIDAM(userServiceTransactionDto, supplierAdminUpdateList, roleSetForRemoveSupplier); LOGGER.info("ManagrUserServiceUtil : removeAdminRoleAndUpdateDetails : isIDAMSuccess :: {}", isIDAMSuccess); } if (!CollectionUtils.isEmpty(finalUpdateSBDList) || !CollectionUtils.isEmpty(supplierCountryDeptDeleteList)) { String serviceName = prepareEnumKey(CommonConstants.DOC); roleSetForRemoveSupplier = prepareContextForRemoveRole(ServiceEnum.valueOf(serviceName).role()); removeRoleRequest.setServiceName(serviceName); UserServiceTransactionDto userServiceTransactionDto = new UserServiceTransactionDto(); userServiceTransactionDto = (UserServiceTransactionDto) beanUtil .copyObjectProperties(userServiceTransactionDto, removeRoleRequest); isIDAMSuccess = processUserInIDAM(userServiceTransactionDto, finalUpdateSBDList, roleSetForRemoveSupplier); LOGGER.info("ManagrUserServiceUtil : removeAdminRoleAndUpdateDetails : isIDAMSuccess :: {}", isIDAMSuccess); } // NSP List userRoleListToDelete = new ArrayList<>(); userRoleListToDelete.addAll(supplierAdminDeleteList); boolean isUserDeleted = false; boolean isUserUpdated = false; boolean isDocumentAlertDeleted = false; boolean isContactUpdated = false; if (isIDAMSuccess) { if (!CollectionUtils.isEmpty(userRoleListToDelete)) { isUserDeleted = deleteSAAndSLBDRoleForRemovalRequest(userRoleListToDelete, removeRoleRequest.getEmail()); LOGGER.info("ManagrUserServiceUtil : removeAdminRoleAndUpdateSBDDetails : isUserDeleted :: {}", isUserDeleted); } if (!CollectionUtils.isEmpty(finalUpdateSBDList)) { isUserUpdated = updateSAAndSLBDRoleForRemovalRequest(finalUpdateSBDList); LOGGER.info("ManagrUserServiceUtil : removeAdminRoleAndUpdateSBDDetails : isUserUpdated :: {}", isUserUpdated); } if (!CollectionUtils.isEmpty(documentAlertUpdateSBDList)) { isDocumentAlertDeleted = documentUtil.deleteDocumentsForNspUserRole(documentAlertUpdateSBDList); LOGGER.info( "ManagrUserServiceUtil : removeAdminRoleAndUpdateSBDDetails : isDocumentAlertDeleted :: {}", isDocumentAlertDeleted); } for (NspUserRole userRole : supplierAdminDeleteList) { removeRoleRequest.setMmsSupplierNumber(userRole.getMmsSupplierNumber()); isContactUpdated = removeSupplierFromContacts(removeRoleRequest); LOGGER.info("ManagrUserServiceUtil : removeAdminRoleAndUpdateSBDDetails : isContactUpdated :: {}", isContactUpdated); } boolean isTransactionSuccessfull = isUserUpdateOrDeleteSuccess(isUserDeleted, isUserUpdated, isDocumentAlertDeleted, isContactUpdated); insertIntoNspTransactionsForRoleRemoval(removeRoleRequest, response, updatedUserRoleList, roleSetForRemoveSupplier, isTransactionSuccessfull); } else { LOGGER.info( "ManagrUserServiceUtil : removeAdminRoleAndUpdateSBDDetails :Failed to remove the role from user"); response.setStatusCode(HttpStatusCode.STATUS_CODE_500); response.setStatusMessage(UserManagementServiceConstants.SUPPLIER_NOT_DELETED_ERROR_MSG); } } catch (SupplierCompanyDataException | NspUserManagementDataException | SupplierContactsDataException | UserAuthException | NspDocumentAlertDataException | NspMasterDataTranslationUtilException e) { LOGGER.error("Supplier not removed. Please raise support request: {} ", e); throw new UserManagementServiceException("Supplier not removed. Please raise support request : {}", e); } LOGGER.debug("Leaving method removeAdminRoleAndUpdateSBDDetails in ManagrUserServiceUtil"); return response; } private List updateAdminDepartmentForSBDRole(List filteredSameSuppNumberSBDList, List updatedCountryDeptSBDList, List supplierAdminDeleteList) { if (!CollectionUtils.isEmpty(filteredSameSuppNumberSBDList)) { LOGGER.info( "In method updateAdminDepartmentForSBDRole in ManageUserServiceUtil- filtering SBD of user which has multiple dep along with admin dep"); for (NspUserRole role : filteredSameSuppNumberSBDList) { if (!(role.getBusinessDepartment().size() == 1 && role.getBusinessDepartment().get(0).equalsIgnoreCase(RegistrationConstants.ADMIN))) { List list = new ArrayList<>(); list.addAll(role.getBusinessDepartment()); list.removeIf(dept -> dept.contains(RegistrationConstants.USER_TYPE_ADMIN)); role.setBusinessDepartment(list); updatedCountryDeptSBDList.add(role); } else if ((role.getBusinessDepartment().size() == 1 && role.getBusinessDepartment().get(0).equalsIgnoreCase(RegistrationConstants.ADMIN))) { /* Added IN NSP-8585 */ /** * if business department is only Admin the SDB role need to be removed from DB **/ supplierAdminDeleteList.add(role); } } } return updatedCountryDeptSBDList; } private void insertIntoNspTransactionsForRoleRemoval(RemoveUserRoleRequest removeRoleRequest, Response response, List updatedUserRoleList, Set roleSetForRemoveSupplier, boolean isTransactionSuccessfull) throws SupplierCompanyDataException { if (isTransactionSuccessfull) { response.setStatusCode(HttpStatusCode.SUCCESS_CODE); response.setStatusMessage("Supplier Admin role removed Successfully"); if (updatedUserRoleList.size() > 1) { UpdateUserRoleContext updateUserRoleContext = createContextForIdam(updatedUserRoleList, roleSetForRemoveSupplier, CommonConstants.SUPPLIER_ONBOARDING); this.insertNspTransactionsForRemoveRole(removeRoleRequest, jsonUtil.writeJsonString(updateUserRoleContext.getContextMappings())); } } else { response.setStatusCode(HttpStatusCode.STATUS_CODE_400); response.setStatusMessage(HttpStatusCode.STATUS_MESSAGE_400); } } private List getSBDRoleListForRestCountries(RemoveUserRoleRequest removeRoleRequest, List userRoleList) { LOGGER.info( "Entered method getSBDRoleListForRestCountries in ManageUserServiceUtil- filtering SBD of user which has rest of the countries"); return userRoleList.stream() .filter(role -> role.getNspUserRolePrimaryKey().getNspRole() .equalsIgnoreCase(NspUserRoles.NSP_SUPPLIER_SL_COUNTRY_DEPT.getUserRole())) .filter(role -> !(role.getNspUserRolePrimaryKey().getCountry() .equalsIgnoreCase(removeRoleRequest.getCountry())) && role.getNspUserRolePrimaryKey().getSalesLine() .equalsIgnoreCase(removeRoleRequest.getSalesline())) .collect(Collectors.toList()); } private List getSBDRoleListForAdminDepartment(RemoveUserRoleRequest removeRoleRequest, List userRoleList, List mmsSupplierNumbers) { LOGGER.info( "Entered method getSBDRoleListForAdminDepartment in ManageUserServiceUtil- filtering SBD list which has only admin dep alone"); return userRoleList.stream() .filter(role -> role.getNspUserRolePrimaryKey().getNspRole() .equalsIgnoreCase(NspUserRoles.NSP_SUPPLIER_SL_COUNTRY_DEPT.getUserRole())) .filter(role -> role.getNspUserRolePrimaryKey().getCountry() .equalsIgnoreCase(removeRoleRequest.getCountry()) && role.getNspUserRolePrimaryKey().getSalesLine() .equalsIgnoreCase(removeRoleRequest.getSalesline())) .filter(role -> role.getBusinessDepartment().contains(RegistrationConstants.ADMIN_CAPITAL)) .filter(role -> mmsSupplierNumbers.contains(role.getMmsSupplierNumber())).collect(Collectors.toList()); } public List getSBDRoleList(List userRoleList) { return userRoleList.stream() .filter(role -> role.getNspUserRolePrimaryKey().getNspRole() .equalsIgnoreCase(NspUserRoles.NSP_SUPPLIER_SL_COUNTRY_DEPT.getUserRole())) .collect(Collectors.toList()); } public List getSBDRoleListForCompany(RemoveUserRoleRequest removeRoleRequest, List userRoleList, List mmsSupplierNumbers) { return userRoleList.stream() .filter(role -> role.getNspUserRolePrimaryKey().getNspRole() .equalsIgnoreCase(NspUserRoles.NSP_SUPPLIER_SL_COUNTRY_DEPT.getUserRole())) .filter(role -> role.getNspUserRolePrimaryKey().getCountry() .equalsIgnoreCase(removeRoleRequest.getCountry()) && role.getNspUserRolePrimaryKey().getSalesLine() .equalsIgnoreCase(removeRoleRequest.getSalesline())) .filter(role -> mmsSupplierNumbers.contains(role.getMmsSupplierNumber())).collect(Collectors.toList()); } public List getSBasisRoleListForCompany(RemoveUserRoleRequest removeRoleRequest, List userRoleList, List mmsSupplierNumbers) { return userRoleList.stream() .filter(role -> role.getNspUserRolePrimaryKey().getNspRole() .equalsIgnoreCase(NspUserRoles.NSP_SUPPLIER_BASIS_ROLE.getUserRole())) .filter(role -> role.getNspUserRolePrimaryKey().getCountry() .equalsIgnoreCase(removeRoleRequest.getCountry()) && role.getNspUserRolePrimaryKey().getSalesLine() .equalsIgnoreCase(removeRoleRequest.getSalesline())) .filter(role -> mmsSupplierNumbers.contains(role.getMmsSupplierNumber())).collect(Collectors.toList()); } public List getSupplierAdminListForCountrySalesline(RemoveUserRoleRequest removeRoleRequest, List userRoleList, List mmsSupplierNumbers) { LOGGER.info("Entered method getSupplierAdminListForCountrySalesline in ManageUserServiceUtil"); return userRoleList.stream() .filter(role -> role.getNspUserRolePrimaryKey().getNspRole() .equalsIgnoreCase(NspUserRoles.NSP_SUPPLIER_ADMIN.getUserRole()) || role.getNspUserRolePrimaryKey().getNspRole() .equalsIgnoreCase(NspUserRoles.INT_SUPPLIER_ADMIN.getUserRole())) .filter(role -> role.getNspUserRolePrimaryKey().getCountry() .equalsIgnoreCase(removeRoleRequest.getCountry()) && role.getNspUserRolePrimaryKey().getSalesLine() .equalsIgnoreCase(removeRoleRequest.getSalesline())) .filter(role -> mmsSupplierNumbers.contains(role.getMmsSupplierNumber())).collect(Collectors.toList()); } /** Changing the method to filter admin list based on role */ public List getSupplierAdminList(List userRoleList, RemoveUserRoleRequest removeRoleRequest) { LOGGER.info("Entered method removeAdminRoleAndUpdateSBDDetails in ManageUserServiceUtil"); if (removeRoleRequest.getCountry().equalsIgnoreCase(CompanyManagementConstants.COUNTRY_INT)) { return userRoleList.stream() .filter(role -> role.getNspUserRolePrimaryKey().getNspRole() .equalsIgnoreCase(NspUserRoles.INT_SUPPLIER_ADMIN.getUserRole())) .collect(Collectors.toList()); } else { return userRoleList.stream() .filter(role -> role.getNspUserRolePrimaryKey().getNspRole() .equalsIgnoreCase(NspUserRoles.NSP_SUPPLIER_ADMIN.getUserRole())) .collect(Collectors.toList()); } } private boolean isUserUpdateOrDeleteSuccess(boolean isUserDeleted, boolean isUserUpdated, boolean isDocumentAlertDeleted, boolean isContactUpdated) { boolean flagA = false; boolean flagB = false; boolean flag = false; if (isUserDeleted && isContactUpdated) { flagA = true; } if (isUserUpdated && isDocumentAlertDeleted) { flagB = true; } if (flagA || flagB) { flag = true; } return flag; } public boolean deleteSAAndSLBDRoleForRemovalRequest(List userRoleListToDelete, String userEmail) throws NspUserManagementDataException { LOGGER.debug("Entered method deleteSAAndSLBDRoleForRemovalRequest in ManagrUserServiceUtil"); boolean isDeleted; boolean isDeletedInSolr; boolean flag = false; boolean isDeleteSuccessfull = true; for (NspUserRole userRole : userRoleListToDelete) { isDeleted = nspUserRoleDao.deleteUserRole(userRole); isDeletedInSolr = this.deleteUserRoleInSolr(userRole, userEmail); LOGGER.info("isDeletedInSolr in userRole solr :: {}", isDeletedInSolr); if (!isDeleted || !isDeletedInSolr) { isDeleteSuccessfull = false; } } LOGGER.info("isDeleted in userRole DB and solr ::: {}", isDeleteSuccessfull); LOGGER.debug("Leaving method deleteSAAndSLBDRoleForRemovalRequest in ManagrUserServiceUtil"); if (isDeleteSuccessfull) { flag = true; } return flag; } private boolean updateSAAndSLBDRoleForRemovalRequest(List userRoleListToDelete) throws NspUserManagementDataException, SupplierContactsDataException, SupplierCompanyDataException, NspMasterDataTranslationUtilException { LOGGER.debug("Entered method updateSAAndSLBDRoleForRemovalRequest in ManagrUserServiceUtil"); boolean isUpdated; boolean isUpdatedInSolr; boolean flag = false; boolean isUpdateSuccessfull = true; for (NspUserRole userRole : userRoleListToDelete) { isUpdated = nspUserRoleDao.updateUserRole(userRole); isUpdatedInSolr = updateSolrUserRoleDepartment(userRole); if (!isUpdatedInSolr || !isUpdated) { isUpdateSuccessfull = false; } LOGGER.info("isUpdated in userRole DB ::: {}", isUpdated); LOGGER.info("isUpdatedInSolr in userRole solr :: {}", isUpdatedInSolr); } LOGGER.info("isUpdated Successfull ::: {}", isUpdateSuccessfull); LOGGER.debug("Leaving method updateSAAndSLBDRoleForRemovalRequest in ManagrUserServiceUtil"); if (isUpdateSuccessfull) { flag = true; } return flag; } private void insertNspTransactionsForRemoveRole(RemoveUserRoleRequest removeRoleRequest, String serviceParameter) { UserServiceTransactionsEntity userServiceTransactionsEntity = new UserServiceTransactionsEntity(); UserServiceTransactionsPrimaryKey userServiceTransactionsPrimaryKey = new UserServiceTransactionsPrimaryKey(); userServiceTransactionsPrimaryKey.setCountry(removeRoleRequest.getCountry()); userServiceTransactionsPrimaryKey.setSalesline(removeRoleRequest.getSalesline()); userServiceTransactionsPrimaryKey.setTransactionId(UUID.randomUUID()); userServiceTransactionsEntity.setUserServiceTransactionKey(userServiceTransactionsPrimaryKey); userServiceTransactionsEntity.setComments(removeRoleRequest.getComments()); userServiceTransactionsEntity.setLastUpdatedBy(NspUserContext.getUpn()); userServiceTransactionsEntity.setLastUpdatedTimestamp(new Date()); userServiceTransactionsEntity.setAction(UserManagementServiceConstants.REMOVE_SERVICE); userServiceTransactionsEntity.setCreatedBy(NspUserContext.getUpn()); userServiceTransactionsEntity.setCreatedTimestamp(new Date()); userServiceTransactionsEntity.setServiceRequestId(this.createServiceRequestId()); userServiceTransactionsEntity.setServiceName(removeRoleRequest.getServiceName()); userServiceTransactionsEntity.setServiceParameter(serviceParameter); userServiceTransactionsEntity.setStatus("SUCCESS"); userServiceTransactionsEntity.setUserId(removeRoleRequest.getEmail()); userServiceTransactionsDao.createUserServiceTransactions(userServiceTransactionsEntity); } public Response updateContextOfSupplier(AddUserRoleRequest addUserRoleRequest, List userRoleList) throws UserManagementServiceException { LOGGER.debug("Entered method updateDepartmentOfSupplier in ManagrUserServiceUtil"); Response response; try { response = new Response(); List listTobeUpdatedInIdam = new ArrayList<>(); listTobeUpdatedInIdam.addAll(userRoleList); List completeRoleListToBeUpdated = setNewDepartments(addUserRoleRequest, listTobeUpdatedInIdam); String serviceName = prepareEnumKey(addUserRoleRequest.getServiceName()); Set roleSetForRemoveSupplier = prepareContextForRemoveRole( ServiceEnum.valueOf(serviceName).role()); UserServiceTransactionDto userServiceTransactionDto = new UserServiceTransactionDto(); userServiceTransactionDto = (UserServiceTransactionDto) beanUtil .copyObjectProperties(userServiceTransactionDto, addUserRoleRequest); boolean isIDAMSuccess = processUserInIDAM(userServiceTransactionDto, completeRoleListToBeUpdated, roleSetForRemoveSupplier); LOGGER.info("ManagrUserServiceUtil : updateRoleOfSupplier : isIDAMSuccess :: {}", isIDAMSuccess); if (isIDAMSuccess) { boolean isUpdated = updateContextInNspUserRole(addUserRoleRequest, completeRoleListToBeUpdated); LOGGER.info("ManagrUserServiceUtil : updateRoleOfSupplier : isUpdated :::: {}", isUpdated); if (isUpdated) { response.setStatusCode(HttpStatusCode.SUCCESS_CODE); response.setStatusMessage("Supplier context updated successfully"); } else { response.setStatusMessage(" Supplier context not updated"); response.setErrorCode("1001"); errorUtil.getErrorCodeForManageUser("1001", response); } } else { LOGGER.info( "ManagrUserServiceUtil : updateRoleOfSupplier :Failed to update the department of the user"); response.setStatusCode(HttpStatusCode.STATUS_CODE_500); response.setErrorCode("1001"); response.setStatusMessage(UserManagementServiceConstants.SUPPLIER_CONTEXT_NOT_UPDATED_ERROR_MSG); errorUtil.getErrorCodeForManageUser("1001", response); } } catch (SupplierCompanyDataException | NspUserManagementDataException | NspDocumentAlertServiceException | UserAuthException | SupplierContactsServiceException | NspMasterDataTranslationUtilException | NspUserRegistrationDataException e) { LOGGER.error("Supplier departments are not updated. Please raise support request: {} ", e); throw new UserManagementServiceException( "Supplier departments are not updated. Please raise support request : {}", e); } LOGGER.debug("Leaving method updateRoleOfSupplier in ManagrUserServiceUtil"); return response; } private List setNewDepartments(AddUserRoleRequest addUserRoleRequest, List listTobeUpdatedInIdam) { List completeRoleListToBeUpdated = new ArrayList<>(); for (NspUserRole userRole : listTobeUpdatedInIdam) { if (addUserRoleRequest.getMmsSupplierNumber().equalsIgnoreCase(userRole.getMmsSupplierNumber())) { userRole.setBusinessDepartment(addUserRoleRequest.getBusinessDepartments()); } completeRoleListToBeUpdated.add(userRole); } return completeRoleListToBeUpdated; } private boolean updateContextInNspUserRole(AddUserRoleRequest addUserRoleRequest, List userRoleList) throws NspUserManagementDataException, SupplierCompanyDataException, SupplierContactsServiceException, NspDocumentAlertServiceException, NspMasterDataTranslationUtilException, NspUserRegistrationDataException { LOGGER.debug("Entered method updateNspUserRole in ManagrUserServiceUtil"); boolean isUpdated = false; boolean isUpdatedInDocuments; boolean isUpdatedInContacts; List userRoleListToBeUpdated = new ArrayList<>(); List filteredRoleList = userRoleList; filteredRoleList = filteredRoleList.stream() .filter(role -> role.getMmsSupplierNumber().equalsIgnoreCase(addUserRoleRequest.getMmsSupplierNumber())) .filter(role -> role.getNspUserRolePrimaryKey().getCountry().equals(addUserRoleRequest.getCountry())) .filter(role -> role.getNspUserRolePrimaryKey().getSalesLine() .equals(addUserRoleRequest.getSalesline())) .collect(Collectors.toList()); for (NspUserRole userRole : filteredRoleList) { userRole.setLastUpdatedDate(new Date()); userRoleListToBeUpdated.add(userRole); } boolean isUpdatedInDb = nspUserRoleDao.updateUserRoleList(userRoleListToBeUpdated); LOGGER.info("isUpdatedInDb in userRole DB ::: {}", isUpdatedInDb); if (isUpdatedInDb) { NspUserRole userRole = filteredRoleList.get(0); UserServiceTransactionDto userServiceTransactionDto = new UserServiceTransactionDto(); userServiceTransactionDto = (UserServiceTransactionDto) beanUtil .copyObjectProperties(userServiceTransactionDto, addUserRoleRequest); userServiceTransactionDto.setBusinessDepartments(userRole.getBusinessDepartment()); saveTransactionDetails(userServiceTransactionDto, userRole.getServiceRequestId(), UserManagementServiceConstants.UPDATE_SERVICE); boolean isUpdatedInSolr = updateSolrUserRoleDepartment(userRole); if (isUpdatedInSolr) { LOGGER.debug("isUpdatedInSolr in UserRoleSolr ::: {}", isUpdatedInSolr); isUpdatedInContacts = updateInContactDb(addUserRoleRequest, userRoleList); LOGGER.debug("isUpdatedInContacts in Contacts DB,Solr ::: {}", isUpdatedInContacts); isUpdatedInDocuments = updateInDocumentAlerts(addUserRoleRequest); LOGGER.debug("isUpdatedInDocuments in DocumentAlertsDB,Solr ::: {}", isUpdatedInDocuments); if (isUpdatedInContacts && isUpdatedInDocuments) { isUpdated = true; LOGGER.debug("isUpdated in all the places ::: {}", isUpdated); } } } return isUpdated; } @SuppressWarnings("unchecked") private boolean updateSolrUserRoleDepartment(NspUserRole role) throws NspMasterDataTranslationUtilException { boolean isUpdatedInSolr = false; LOGGER.debug("ManageUserServiceUtil : updateSolrUserRoleDepartment : Start"); SolrInputDocument solrDocument = new SolrInputDocument(); /** Get listing system name */ String listingSystemName = listingSystemInfoUtil.getListingSystem(role.getNspUserRolePrimaryKey().getCountry(), role.getNspUserRolePrimaryKey().getSalesLine()); /** Generate the key for the solr entity */ StringJoiner key = new StringJoiner("_"); key.add(role.getUserId()); key.add(listingSystemName); key.add(role.getNspUserRolePrimaryKey().getNspRole()); key.add(role.getMmsSupplierNumber()); List uniqueIdList = new ArrayList<>(); uniqueIdList.add(key.toString()); /** Set the key for which the update need to do */ solrDocument.addField(UserManagementServiceConstants.USERROLE_SERVICELISTING_ID, key.toString()); /** Set all the values to update in solr record */ solrQueryUtil.setFieldValueToUpdate(solrDocument, RegistrationConstants.COLUMN_LAST_UPDATED_DATE_SOLR, new Date()); solrQueryUtil.setFieldValueToUpdate(solrDocument, RegistrationConstants.DEPARTMENT_KEYWORD, role.getBusinessDepartment()); try { Criteria condition = new Criteria(UserManagementServiceConstants.USERROLE_SERVICELISTING_ID) .is(key.toString()); SolrSearchResultDto solrSearchResultDto = nspSolrClient.searchWithoutPagination(condition, UserRoleServiceSolrEntity.class, userRoleServiceCollectionName.trim()); UserRoleServiceSolrEntity userRoleServiceSolrEntity = (UserRoleServiceSolrEntity) solrSearchResultDto .getSearchResults().get(0); userRoleServiceSolrEntity.setDepartment(role.getBusinessDepartment()); userRoleServiceSolrEntity.setLastUpdatedDate(new Date()); userRoleServiceSolrEntity = (UserRoleServiceSolrEntity) masterTranslationUtil.mapTranslationToMasterData( userRoleServiceSolrEntity, role, RegistrationConstants.DEPARTMENT, role.getNspUserRolePrimaryKey().getCountry(), role.getNspUserRolePrimaryKey().getSalesLine()); isUpdatedInSolr = nspSolrClient.insert(userRoleServiceSolrEntity, userRoleServiceCollectionName.trim()); } catch (SolrException e) { LOGGER.error("Exception occured while trying to update user role details in userRoleService Solr {}", e); boolean isFailedRecordInserted = userManagementSolrDaoImpl.saveSolrFailedRecordToDBForUpdateUserRole(e, role.getNspUserRolePrimaryKey().getCountry(), role.getNspUserRolePrimaryKey().getSalesLine(), solrDocument); isUpdatedInSolr = false; LOGGER.debug("user role solr failed record inserted in db {}", isFailedRecordInserted); } LOGGER.debug("ManageUserServiceUtil : updateSolrUserRoleDepartment : End"); return isUpdatedInSolr; } private Boolean updateInContactDb(AddUserRoleRequest addUserRoleRequest, List userRoleList) throws SupplierContactsServiceException { LOGGER.debug("ManageUserServiceUtil : updateInContactDb : start"); Boolean isUpdatedInDb; isUpdatedInDb = supplierContactsSyncService.updateSupplierContactsDepartments(addUserRoleRequest, userRoleList); LOGGER.debug("ManageUserServiceUtil : updateInContactDb {}: end and updation in ContactsDb&Solr=", isUpdatedInDb); return isUpdatedInDb; } private Boolean updateInDocumentAlerts(AddUserRoleRequest addUserRoleRequest) throws NspDocumentAlertServiceException, NspUserRegistrationDataException { LOGGER.debug("ManageUserServiceUtil : updateInDocumentAlerts : start"); Boolean isUpdatedInDb; String userId = addUserRoleRequest.getEmail(); String country = addUserRoleRequest.getCountry(); String salesLine = addUserRoleRequest.getSalesline(); String supplierNumber = addUserRoleRequest.getMmsSupplierNumber(); List departments = addUserRoleRequest.getBusinessDepartments(); List allowedLanguages = listingSystemInfoUtil.getAllowedLanguagesByCountrySalesline( addUserRoleRequest.getCountry(), addUserRoleRequest.getSalesline()); List documentWorkflowMetadataList = userServicesMasterDataDao .fetchUserServicesMetaDataTranslationByCountrySalesline(addUserRoleRequest.getCountry(), addUserRoleRequest.getSalesline()); List filteredDocumentAlertData = documentWorkflowMetadataList.stream() .filter(documentAlertMetaData -> allowedLanguages .contains(documentAlertMetaData.getUserServiceMasterDataTranslationKey().getLanguage())) .collect(Collectors.toList()); Map>> documentDataGroupedByAlertDataKey = filteredDocumentAlertData .stream() .collect(Collectors.groupingBy( documentAlertMetaData -> documentAlertMetaData.getUserServiceMasterDataTranslationKey() .getMasterKey(), Collectors.toMap( documentAlertMetaData -> ((UserServicesMetadataTranslation) documentAlertMetaData) .getUserServiceMasterDataTranslationKey().getLanguage(), regMeta -> ((UserServicesMetadataTranslation) regMeta).getMasterValue()))); isUpdatedInDb = documentAlertService.updateDocumentAlerts(userId, country, salesLine, supplierNumber, departments, documentDataGroupedByAlertDataKey, allowedLanguages); LOGGER.debug("ManageUserServiceUtil : updateInDocumentAlerts : End"); return isUpdatedInDb; } public void saveRegularUserToSupplierAdminDetails(SaveRegularUserToSARequest saveRegularUserToSARequest) throws SupplierCompanyDataException { LOGGER.debug("Entered method saveRegularUserToSupplierAdminDetails in ManagrUserServiceUtil"); String serviceRequestId = this.createServiceRequestId(); UserServiceTransactionDto userServiceTransactionDto = new UserServiceTransactionDto(); userServiceTransactionDto = (UserServiceTransactionDto) beanUtil.copyObjectProperties(userServiceTransactionDto, saveRegularUserToSARequest); userServiceTransactionDto.setEmail(saveRegularUserToSARequest.getRegEmailId()); userServiceTransactionDto.setServiceName(UserManagementServiceConstants.SUPPLIER_ONBOARDING); saveTransactionDetails(userServiceTransactionDto, serviceRequestId, UserManagementServiceConstants.ADD_RU_ADMIN_SERVICE, saveRegularUserToSARequest.getParentId(), UserManagementServiceConstants.STATUS_PENDING); LOGGER.debug("Leaving method saveRegularUserToSupplierAdminDetails in ManagrUserServiceUtil"); } public List fetchUserServiceTransaction(String country, String salesline, String status) throws UserManagementDataException { LOGGER.debug("In fetchUserServiceTransaction in ManagrUserServiceUtil"); return userServiceTransactionsDao.fetchUserServiceTransaction(country, salesline, status); } public List getMCAEmailList(String country, String salesline) throws NspUserDataException { LOGGER.debug("In getMCAEmailList for country {} and salesline {} ", country, salesline); List countryAdminList = null; List userList = null; try { countryAdminList = nspUserRoleDao .fetchUserRoles(NspUserRoles.NSP_METRO_SALESLINE_COUNTRY_ADMIN.getUserRole()); if (CollectionUtils.isNotEmpty(countryAdminList)) { countryAdminList = countryAdminList.stream() .filter(obj -> obj.getNspUserRolePrimaryKey().getCountry().equalsIgnoreCase(country)) .collect(Collectors.toList()); Set userIdList = countryAdminList.stream().map(NspUserRole::getUserId) .collect(Collectors.toCollection(HashSet::new)); List uniqueEmails = new ArrayList<>(userIdList); userList = nspUserDao.fetchNspUsers(uniqueEmails); } } catch (NspUserDataException | NspUserManagementDataException exception) { LOGGER.error("Exception: getAdminEmailList: {}", exception); throw new NspUserDataException(exception); } return userList; } /** * Assign Admin Role to Accepted Regular User & Assign Admin Department for Non * INT Supplier * * @param addRoleRequest * @param serviceRequestId * @param childSuppliersList * @param nspUser * @throws UserManagementServiceException */ public Response processAdminRoleAdditionForUser(AddUserRoleRequest addRoleRequest, String serviceRequestId, List childSuppliersList, NspUser nspUser) throws UserManagementServiceException { Response response = new Response(); try { LOGGER.debug("Entered method processAdminRoleAdditionForUser in ManagrUserServiceUtil"); List userRoleList = nspUserRoleDao.fetchUserRoles(addRoleRequest.getEmail(), null); UserRole userRole = new UserRole(); userRole.setUserType(UserType.SUPP.getUserType()); userRole.setRoleId(ServiceEnum.valueOf(this.prepareEnumKey(addRoleRequest.getServiceName())).role()); Set userRoleSet = new HashSet<>(); for (SupplierCompany supplierCompany : childSuppliersList) { prepareConsolidatedAdminRoles(addRoleRequest, supplierCompany, userRole, userRoleSet); } LOGGER.debug("In processAdminRoleAdditionForUser userRoleSet size {}", userRoleSet.size()); /** * append existing and new context,consolidate and update for large context * issue */ AssignRoleResponse userRoleResponse = this.processConsolidationForExistingIDAMContext(addRoleRequest, addRoleRequest.getEmail(), userRoleSet, nspUser.getUserUniqueId()); for (SupplierCompany supplierCompany : childSuppliersList) { response = processAdditionOfAdminAndSbd(addRoleRequest, serviceRequestId, nspUser, userRoleList, userRoleResponse, supplierCompany); } } catch (DocumentArchiveException | UtilException | JsonProcessingException | SupplierCompanyDataException | UserAuthException | SupplierContactsDataException | NspUserManagementDataException e) { LOGGER.error("Exception Occured while processing the data in processAdminRoleAdditionForUser: {} ", e); throw new UserManagementServiceException( "Exception while while processing the data in processAdminRoleAdditionForUser in ManagrUserServiceUtil: {}", e); } LOGGER.debug("Leaving method processAdminRoleAdditionForUser in ManagrUserServiceUtil"); return response; } private Response processAdditionOfAdminAndSbd(AddUserRoleRequest addRoleRequest, String serviceRequestId, NspUser nspUser, List userRoleList, AssignRoleResponse userRoleResponse, SupplierCompany supplierCompany) throws SupplierCompanyDataException, JsonProcessingException, SupplierContactsDataException, UserManagementServiceException { LOGGER.debug("entering method processAdditionOfAdminAndSbd in ManagrUserServiceUtil"); Response response = new Response(); /* process admin add in nsp db and solr and contact update */ NspUserRole nspUserRole = processInNspForAdminAddition(addRoleRequest, serviceRequestId, nspUser, userRoleResponse, supplierCompany); if (null != nspUserRole) { /* process sbd addition or update for admin dept */ response = processSbdAdditionForAdminDept(addRoleRequest, serviceRequestId, userRoleList, supplierCompany); } LOGGER.debug("Leaving method processAdditionOfAdminAndSbd in ManagrUserServiceUtil"); return response; } public Response processSbdAdditionForAdminDept(AddUserRoleRequest addRoleRequest, String serviceRequestId, List userRoleList, SupplierCompany supplierCompany) throws UserManagementServiceException { LOGGER.debug("Entering method processSbdAdditionForAdminDept in ManagrUserServiceUtil"); Response response = new Response(); /* condition is to restrict addition of sbd for Global LDS number */ if (checkCompanyServiceForSbdAdd(supplierCompany.getServicesName())) { /* filtering because for some roles suppno is null for NL */ List filteredRolesListLDS = userRoleList.stream() .filter(userRoleObj -> userRoleObj.getMmsSupplierNumber() != null).collect(Collectors.toList()); /* filter for existing sbd for request */ List userRoleLds = filteredRolesListLDS.stream() .filter(userRoleSBDObj -> userRoleSBDObj.getNspUserRolePrimaryKey().getCountry() .equalsIgnoreCase(addRoleRequest.getCountry()) && userRoleSBDObj.getNspUserRolePrimaryKey().getSalesLine() .equalsIgnoreCase(addRoleRequest.getSalesline()) && userRoleSBDObj.getMmsSupplierNumber().equalsIgnoreCase( supplierCompany.getSupplierCompanyPrimaryKey().getMmsSupplierNumber()) && userRoleSBDObj.getNspUserRolePrimaryKey().getNspRole() .equalsIgnoreCase(NspUserRoles.NSP_SUPPLIER_SL_COUNTRY_DEPT.getUserRole())) .collect(Collectors.toList()); if (CollectionUtils.isNotEmpty(userRoleLds)) { /* update the Admin dept for the existing SBD role for the suppNo */ /** We can consolidate the SBD role update, kept for future tasks */ response = updateDeptForSbdRole(addRoleRequest, supplierCompany, userRoleLds); LOGGER.info("updateSbdRole :::: {}", response); } else if (!UserManagementConstants.INTERNATIONAL_COUNTRY_CODE .equalsIgnoreCase(addRoleRequest.getCountry())) { /* * If SBD role not present for that suppNo then we need to assign the SBD role * to that suppNo */ AddUserRoleRequest assignSbdRequest = new AddUserRoleRequest(); beanUtil.copyObjectProperties(assignSbdRequest, addRoleRequest); assignSbdRequest .setMmsSupplierNumber(supplierCompany.getSupplierCompanyPrimaryKey().getMmsSupplierNumber()); assignSbdRequest.setBusinessDepartments(Arrays.asList("Admin")); assignSbdRequest.setServiceName(ServiceEnum.DOCUMENTS.serviceName()); response = manageUserDocumentsService.addServiceToSupplierUser(assignSbdRequest, serviceRequestId); LOGGER.info("assign SBD role response :::: {}", response); } } LOGGER.debug("Leaving method processSbdAdditionForAdminDept in ManagrUserServiceUtil"); return response; } private boolean checkCompanyServiceForSbdAdd(List servicesName) { boolean isServiceValidForSbdAdd = true; if (CollectionUtils.isNotEmpty(servicesName)) { /* for global lds sbd not present */ isServiceValidForSbdAdd = !servicesName.contains(CommonConstants.GLOBAL_LDS); } return isServiceValidForSbdAdd; } /** * Prepare the depts list to update the sbd role for user * * @param sbdRoleList * @return */ private List getDeptsFromRole(List sbdRoleList) { Set deptsList = new HashSet<>(); for (NspUserRole userRole : sbdRoleList) { deptsList.addAll(userRole.getBusinessDepartment()); } deptsList.add("Admin"); return new ArrayList<>(deptsList); } private NspUserRole processInNspForAdminAddition(AddUserRoleRequest addRoleRequest, String serviceRequestId, NspUser nspUser, AssignRoleResponse userRoleResponse, SupplierCompany supplierCompany) throws SupplierCompanyDataException, JsonProcessingException, SupplierContactsDataException { SupplierUser supplierUserDB = new SupplierUser(); supplierUserDB.setCountry(addRoleRequest.getCountry()); supplierUserDB.setSalesLine(addRoleRequest.getSalesline()); supplierUserDB.setMmsSupplierNumber(supplierCompany.getSupplierCompanyPrimaryKey().getMmsSupplierNumber()); supplierUserDB.setSupplierCompany(supplierCompany.getSupplierCompanyName()); supplierUserDB.setAppName(addRoleRequest.getServiceName()); supplierUserDB.setNspRole(ServiceEnum.valueOf(this.prepareEnumKey(addRoleRequest.getServiceName())).role()); supplierUserDB.setGln(supplierCompany.getGln()); addRoleRequest.setMmsSupplierNumber(supplierCompany.getSupplierCompanyPrimaryKey().getMmsSupplierNumber()); UserRole userRoleForDB = new UserRole(); userRoleForDB.setUserType(UserType.SUPP.getUserType()); userRoleForDB.setRoleId(ServiceEnum.valueOf(this.prepareEnumKey(addRoleRequest.getServiceName())).role()); userRoleForDB.setContextMappings(Arrays.asList(this.getContextMapping(supplierUserDB, new ContextMapping()))); boolean isContactCreated; NspUserRole nspUserRole = null; if (null != userRoleResponse && null != userRoleResponse.getResults() && userRoleResponse.getResults().get(0).getStatus() == 201) { nspUserRole = this.createNspUserRole(nspUser, addRoleRequest, userRoleForDB.getContextMappings(), supplierCompany, serviceRequestId); isContactCreated = this.createContactForNewSupplier(nspUser, nspUserRole, userRoleForDB.getContextMappings()); LOGGER.info("isContactCreated :::: {}", isContactCreated); } return nspUserRole; } /** * @param addRoleRequest * @param supplierCompany * @throws UserManagementServiceException */ private Response updateDeptForSbdRole(AddUserRoleRequest addRoleRequest, SupplierCompany supplierCompany, List sbdRoleList) throws UserManagementServiceException { LOGGER.debug("Entered method updateDeptForSbdRole in ManagrUserServiceUtil"); AddUserRoleRequest updateRoleRequest = new AddUserRoleRequest(); beanUtil.copyObjectProperties(updateRoleRequest, addRoleRequest); updateRoleRequest.setMmsSupplierNumber(supplierCompany.getSupplierCompanyPrimaryKey().getMmsSupplierNumber()); List deptsList = this.getDeptsFromRole(sbdRoleList); updateRoleRequest.setBusinessDepartments(deptsList); updateRoleRequest.setServiceName(ServiceEnum.DOCUMENTS.serviceName()); /* updating the existing SBD role with admin dept */ Response updateSbdRole = manageUserDocumentsService.updateService(updateRoleRequest); LOGGER.debug("Leaving method updateDeptForSbdRole in ManagrUserServiceUtil"); return updateSbdRole; } private void prepareConsolidatedAdminRoles(AddUserRoleRequest addRoleRequest, SupplierCompany supplierCompany, UserRole userRole, Set userRoleSet) throws SupplierCompanyDataException { LOGGER.debug("Entered method prepareConsolidatedAdminRoles in ManagrUserServiceUtil"); SupplierUser supplierUser = new SupplierUser(); supplierUser.setCountry(addRoleRequest.getCountry()); supplierUser.setSalesLine(addRoleRequest.getSalesline()); supplierUser.setMmsSupplierNumber(supplierCompany.getSupplierCompanyPrimaryKey().getMmsSupplierNumber()); supplierUser.setSupplierCompany(supplierCompany.getSupplierCompanyName()); supplierUser.setAppName(addRoleRequest.getServiceName()); supplierUser.setNspRole(ServiceEnum.valueOf(this.prepareEnumKey(addRoleRequest.getServiceName())).role()); supplierUser.setGln(supplierCompany.getGln()); addRoleRequest.setMmsSupplierNumber(supplierCompany.getSupplierCompanyPrimaryKey().getMmsSupplierNumber()); List userRolesList = userRoleSet.stream() .filter(userRoleObj -> userRoleObj.getRoleId().equalsIgnoreCase( ServiceEnum.valueOf(this.prepareEnumKey(addRoleRequest.getServiceName())).role())) .collect(Collectors.toList()); if (!userRolesList.isEmpty()) { /** Add the Supplier to the existing roles */ UserRole userRoleUpdated = userRolesList.get(0); List contextMappingForUpdatedList = userRoleUpdated.getContextMappings(); List countryList = new ArrayList<>(); countryList.add(supplierUser.getCountry()); ContextMapping contextMapping = new ContextMapping(); serviceAssignmentUtil.setContextMapperBasedOnRole(contextMapping, countryList, supplierUser.getSalesLine(), supplierUser.getNspRole(), null, supplierUser); for (ContextMapping existingContextMapping : contextMappingForUpdatedList) { String existCountry = existingContextMapping.getCountry().get(0); String existSalesline = existingContextMapping.getSalesLine().get(0); String country = contextMapping.getCountry().get(0); String salesline = contextMapping.getSalesLine().get(0); // Accept Assign Admin is per country & salesline, supplier number will be // appended to form one context if (existCountry.equalsIgnoreCase(country) && existSalesline.equalsIgnoreCase(salesline)) { existingContextMapping.getSupplierNumber().addAll(contextMapping.getSupplierNumber()); } } } else { userRole.setContextMappings(Arrays.asList(this.getContextMapping(supplierUser, new ContextMapping()))); userRoleSet.add(userRole); } LOGGER.debug("Leaving method prepareConsolidatedAdminRoles in ManagrUserServiceUtil"); } public MqualitySaveSupplierContactRequest prepareMqualitySaveContactRequest(String userId, String mmsSupplierNumber, String firstName, String lastName) { MqualitySaveSupplierContactRequest mqualitySaveSupplierContactRequest = new MqualitySaveSupplierContactRequest(); mqualitySaveSupplierContactRequest.setActionType("NEW"); mqualitySaveSupplierContactRequest.setEmailId(userId); mqualitySaveSupplierContactRequest.setFirstName(firstName); mqualitySaveSupplierContactRequest.setLastName(lastName); mqualitySaveSupplierContactRequest.setSupplierId(mmsSupplierNumber); return mqualitySaveSupplierContactRequest; } public MqualitySaveSupplierContactRequest prepareMqualityUpdateContactRequest(String userId, String mmsSupplierNumber, String firstName, String lastName) { MqualitySaveSupplierContactRequest mqualitySaveSupplierContactRequest = new MqualitySaveSupplierContactRequest(); mqualitySaveSupplierContactRequest.setActionType("MODIFY"); mqualitySaveSupplierContactRequest.setEmailId(userId); mqualitySaveSupplierContactRequest.setFirstName(firstName); mqualitySaveSupplierContactRequest.setLastName(lastName); mqualitySaveSupplierContactRequest.setSupplierId(mmsSupplierNumber); mqualitySaveSupplierContactRequest.setPreviousEmailId(userId); return mqualitySaveSupplierContactRequest; } public AssignRoleResponse consolidateIdamContext(AddUserRoleRequest addUserRoleRequest, String userId, Set userRoleSet, String userUniqueId) throws UserAuthException { LOGGER.info("Entered method consolidateIdamContext in ManagrUserServiceUtil"); AssignRoleResponse userAssignRoleResponse = new AssignRoleResponse(); List roleListForAddRoleRequest = filteredIdamRoleListForConsolidateContext( addUserRoleRequest.getServiceName(), userId); if (CollectionUtils.isNotEmpty(roleListForAddRoleRequest) && null != roleListForAddRoleRequest.get(0).getContextMappings() && !roleListForAddRoleRequest.get(0).getContextMappings().isEmpty()) { checkForUpdateContext(addUserRoleRequest, userRoleSet, userUniqueId, userAssignRoleResponse, roleListForAddRoleRequest); } else { // Should assign the role userAssignRoleResponse = userAuthServiceWrapper.assignRole(addUserRoleRequest.getEmail(), userRoleSet, userUniqueId); } LOGGER.info("Leaving method consolidateIdamContext in ManagrUserServiceUtil"); return userAssignRoleResponse; } private void checkForUpdateContext(AddUserRoleRequest addUserRoleRequest, Set userRoleSet, String userUniqueId, AssignRoleResponse userAssignRoleResponse, List roleListForAddRoleRequest) throws UserAuthException { List existingIdamSbdContext = roleListForAddRoleRequest.get(0).getContextMappings(); List newContextMappingList = userRoleSet.iterator().next().getContextMappings(); UpdateUserRoleContext context = new UpdateUserRoleContext(); UpdateUserRoleRequest updateUserRequest = new UpdateUserRoleRequest(); for (ContextMapping newContext : newContextMappingList) { String country = newContext.getCountry().get(0); String salesline = newContext.getSalesLine().get(0); String dept = newContext.getSupplierBusinessDepartment().get(0); boolean isPresentInOldContext = false; for (ContextMapping existingContext : existingIdamSbdContext) { String existCountry = existingContext.getCountry().get(0); String existSalesline = existingContext.getSalesLine().get(0); String existingDept = existingContext.getSupplierBusinessDepartment().get(0); if (existCountry.equalsIgnoreCase(country) && existSalesline.equalsIgnoreCase(salesline) && existingDept.equalsIgnoreCase(dept)) { existingContext.setSupplierNumber( getList(existingContext.getSupplierNumber(), newContext.getSupplierNumber())); isPresentInOldContext = true; } } if (!isPresentInOldContext) existingIdamSbdContext.add(newContext); } context.setUserType(UserType.SUPP.getUserType()); context.setContextMappings(existingIdamSbdContext); commonMethodForUpdateUserRole(addUserRoleRequest, userUniqueId, userAssignRoleResponse, context, updateUserRequest); } public List filterServicesBasedOnContext(List servicesName, String country) { if (UserManagementServiceConstants.COUNTRY_INT.equals(country) && !accessValidation.checkForPortalAdmin()) { Set appsNames = accessValidation.getAppNamesFromContext(UserManagementServiceConstants.COUNTRY_INT, accessValidation.getRoleForIntBasedOnuserType()); if (CollectionUtils.isNotEmpty(appsNames)) { return new ArrayList<>(appsNames); } else { return servicesName; } } else { return servicesName; } } }